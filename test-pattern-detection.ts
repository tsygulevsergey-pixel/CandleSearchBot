/**
 * –¢–µ—Å—Ç–æ–≤—ã–π —Å–∫—Ä–∏–ø—Ç –¥–ª—è –ø—Ä–æ–≤–µ—Ä–∫–∏ –ª–æ–≥–∏–∫–∏ –æ–ø—Ä–µ–¥–µ–ª–µ–Ω–∏—è –ø–∞—Ç—Ç–µ—Ä–Ω–æ–≤
 * –ó–∞–ø—É—Å–∫: npx tsx test-pattern-detection.ts
 */

import { binanceClient } from './src/utils/binanceClient';
import { patternDetector } from './src/utils/candleAnalyzer';
import { getCoinCluster, getFamilyId } from './src/utils/marketClusters';

async function testPatternDetection() {
  console.log('üß™ [Test] Starting pattern detection test...\n');

  // –¢–µ—Å—Ç–æ–≤—ã–µ –º–æ–Ω–µ—Ç—ã –∏–∑ —Ä–∞–∑–Ω—ã—Ö –∫–ª–∞—Å—Ç–µ—Ä–æ–≤
  const testSymbols = [
    'BTCUSDT',   // BTC:L1
    'ETHUSDT',   // ETH:L1
    'SOLUSDT',   // SOL:L1
    'WIFUSDT',   // SOL:Meme
    'ARBUSDT',   // ETH:L2
    'UNIUSDT',   // ETH:DeFi
    'PORT3USDT', // –ú–æ–Ω–µ—Ç–∞ –∏–∑ —Ç–≤–æ–∏—Ö —Å–∫—Ä–∏–Ω–æ–≤
    'PUMPUSDT',  // –ú–æ–Ω–µ—Ç–∞ –∏–∑ —Ç–≤–æ–∏—Ö —Å–∫—Ä–∏–Ω–æ–≤
  ];

  const timeframe = '15m';

  for (const symbol of testSymbols) {
    console.log(`\n${'='.repeat(80)}`);
    console.log(`üîç Testing ${symbol}`);
    console.log(`${'='.repeat(80)}`);

    try {
      // –ü–æ–ª—É—á–∞–µ–º –∫–ª–∞—Å—Ç–µ—Ä
      const cluster = getCoinCluster(symbol);
      const familyId = getFamilyId(cluster);
      console.log(`üè∑Ô∏è Cluster: ${familyId} (Leader: ${cluster.leader}, Sector: ${cluster.sector})\n`);

      // –ü–æ–ª—É—á–∞–µ–º —Å–≤–µ—á–∏
      const candles = await binanceClient.getKlines(symbol, timeframe, 200);
      console.log(`üìä Loaded ${candles.length} candles`);

      if (candles.length < 200) {
        console.log(`‚ö†Ô∏è Insufficient candles, skipping\n`);
        continue;
      }

      // –î–µ—Ç–µ–∫—Ç–∏—Ä—É–µ–º –ø–∞—Ç—Ç–µ—Ä–Ω—ã
      const patterns = patternDetector.detectAllPatterns(candles, timeframe);

      if (patterns.length === 0) {
        console.log(`‚ùå No patterns detected\n`);
      } else {
        console.log(`\n‚úÖ Found ${patterns.length} pattern(s):\n`);
        
        for (const pattern of patterns) {
          console.log(`   üéØ Pattern: ${pattern.type}`);
          console.log(`   üìä Direction: ${pattern.direction}`);
          console.log(`   üí∞ Entry: ${pattern.entryPrice?.toFixed(8)}`);
          console.log(`   üíØ Score: ${pattern.score || 'N/A'}`);
          console.log();
        }
      }

      // –ù–µ–±–æ–ª—å—à–∞—è –∑–∞–¥–µ—Ä–∂–∫–∞ —á—Ç–æ–±—ã –Ω–µ –ø–µ—Ä–µ–≥—Ä—É–∂–∞—Ç—å API
      await new Promise(resolve => setTimeout(resolve, 500));

    } catch (error: any) {
      console.error(`‚ùå Error testing ${symbol}:`, error.message);
    }
  }

  console.log('\n‚úÖ [Test] Pattern detection test completed!');
  process.exit(0);
}

// –ó–∞–ø—É—Å–∫ —Ç–µ—Å—Ç–∞
testPatternDetection().catch(error => {
  console.error('‚ùå [Test] Fatal error:', error);
  process.exit(1);
});
