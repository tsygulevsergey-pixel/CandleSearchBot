#!/usr/bin/env tsx

/**
 * –°–∫—Ä–∏–ø—Ç –¥–ª—è –ø—Ä–æ–≤–µ—Ä–∫–∏ –ø–µ—Ä–µ—Å—á–µ—Ç–∞ PnL –ø–æ—Å–ª–µ –∏—Å–ø—Ä–∞–≤–ª–µ–Ω–∏—è breakeven –±–∞–≥–∞
 * 
 * –ü–æ–∫–∞–∑—ã–≤–∞–µ—Ç:
 * 1. –í—Å–µ SL_HIT —Å–∏–≥–Ω–∞–ª—ã
 * 2. –ö–∞–∫–∏–µ –∏–∑ –Ω–∏—Ö breakeven
 * 3. –†–∞–∑–Ω–∏—Ü–∞ –º–µ–∂–¥—É —Å—Ç–∞—Ä–æ–π –∏ –Ω–æ–≤–æ–π –ª–æ–≥–∏–∫–æ–π —Ä–∞—Å—á–µ—Ç–∞ PnL
 * 4. –ò—Ç–æ–≥–æ–≤–æ–µ –≤–ª–∏—è–Ω–∏–µ –Ω–∞ —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫—É
 * 
 * –ò—Å–ø–æ–ª—å–∑–æ–≤–∞–Ω–∏–µ:
 *   tsx scripts/check-pnl-recalculation.ts
 */

import { signalDB } from '../src/mastra/storage/db';
import { calculateTradeOutcome } from '../src/utils/tradeOutcomes';

interface PnLComparison {
  signalId: number;
  symbol: string;
  direction: 'LONG' | 'SHORT';
  status: string;
  entryPrice: number;
  currentSl: number;
  originalSl: number;
  isBreakeven: boolean;
  oldPnL: number;  // –ü–æ —Å—Ç–∞—Ä–æ–π –ª–æ–≥–∏–∫–µ (–∏—Å–ø–æ–ª—å–∑–æ–≤–∞–ª slPrice)
  newPnL: number;  // –ü–æ –Ω–æ–≤–æ–π –ª–æ–≥–∏–∫–µ (–∏—Å–ø–æ–ª—å–∑—É–µ—Ç currentSl)
  difference: number;
}

/**
 * –°—Ç–∞—Ä–∞—è –ª–æ–≥–∏–∫–∞ —Ä–∞—Å—á–µ—Ç–∞ PnL (—Å –±–∞–≥–æ–º)
 */
function calculateOldPnL(
  status: string,
  direction: 'LONG' | 'SHORT',
  entryPrice: number,
  tp1Price: number,
  tp2Price: number,
  slPrice: number  // ‚ùå –ò—Å–ø–æ–ª—å–∑–æ–≤–∞–ª—Å—è –æ—Ä–∏–≥–∏–Ω–∞–ª—å–Ω—ã–π SL
): number {
  if (status === 'TP1_HIT') {
    if (direction === 'LONG') {
      return ((tp1Price - entryPrice) / entryPrice) * 100 * 0.5;
    } else {
      return ((entryPrice - tp1Price) / entryPrice) * 100 * 0.5;
    }
  } else if (status === 'TP2_HIT') {
    if (direction === 'LONG') {
      const pnlTp1 = ((tp1Price - entryPrice) / entryPrice) * 100 * 0.5;
      const pnlTp2 = ((tp2Price - entryPrice) / entryPrice) * 100 * 0.5;
      return pnlTp1 + pnlTp2;
    } else {
      const pnlTp1 = ((entryPrice - tp1Price) / entryPrice) * 100 * 0.5;
      const pnlTp2 = ((entryPrice - tp2Price) / entryPrice) * 100 * 0.5;
      return pnlTp1 + pnlTp2;
    }
  } else if (status === 'SL_HIT') {
    // ‚ùå –ë–ê–ì: –í—Å–µ–≥–¥–∞ –∏—Å–ø–æ–ª—å–∑–æ–≤–∞–ª—Å—è slPrice, –¥–∞–∂–µ –¥–ª—è breakeven
    if (direction === 'LONG') {
      return ((slPrice - entryPrice) / entryPrice) * 100;
    } else {
      return ((entryPrice - slPrice) / entryPrice) * 100;
    }
  }
  return 0;
}

async function analyzePnLRecalculation() {
  console.log('üîç –ê–Ω–∞–ª–∏–∑ –ø–µ—Ä–µ—Å—á–µ—Ç–∞ PnL –¥–ª—è —Å—É—â–µ—Å—Ç–≤—É—é—â–∏—Ö —Å–∏–≥–Ω–∞–ª–æ–≤...\n');

  const db = signalDB as any;
  const allSignals = await db.db.select().from(db.db.query.signals);

  const comparisons: PnLComparison[] = [];
  let totalOldPnL = 0;
  let totalNewPnL = 0;
  let breakevenCount = 0;
  let affectedCount = 0;

  for (const signal of allSignals) {
    const entryPrice = parseFloat(signal.entryPrice);
    const tp1Price = parseFloat(signal.tp1Price);
    const tp2Price = parseFloat(signal.tp2Price);
    const slPrice = parseFloat(signal.slPrice);
    const currentSl = parseFloat(signal.currentSl);

    // –°—Ç–∞—Ä–∞—è –ª–æ–≥–∏–∫–∞ (—Å –±–∞–≥–æ–º)
    const oldPnL = calculateOldPnL(
      signal.status,
      signal.direction,
      entryPrice,
      tp1Price,
      tp2Price,
      slPrice  // ‚ùå –í—Å–µ–≥–¥–∞ –∏—Å–ø–æ–ª—å–∑–æ–≤–∞–ª—Å—è –æ—Ä–∏–≥–∏–Ω–∞–ª—å–Ω—ã–π SL
    );

    // –ù–æ–≤–∞—è –ª–æ–≥–∏–∫–∞ (–∏—Å–ø—Ä–∞–≤–ª–µ–Ω–Ω–∞—è)
    const outcome = calculateTradeOutcome({
      status: signal.status,
      direction: signal.direction,
      entryPrice: signal.entryPrice,
      tp1Price: signal.tp1Price,
      tp2Price: signal.tp2Price,
      slPrice: signal.slPrice,
      currentSl: signal.currentSl,  // ‚úÖ –¢–µ–ø–µ—Ä—å –∏—Å–ø–æ–ª—å–∑—É–µ—Ç—Å—è currentSl
    });

    const newPnL = outcome.pnl;
    const difference = newPnL - oldPnL;

    // –°—á–∏—Ç–∞–µ–º —Ç–æ–ª—å–∫–æ –∑–∞–∫—Ä—ã—Ç—ã–µ —Å–∏–≥–Ω–∞–ª—ã
    if (signal.status !== 'OPEN') {
      totalOldPnL += oldPnL;
      totalNewPnL += newPnL;
    }

    if (outcome.isBreakeven) {
      breakevenCount++;
    }

    if (Math.abs(difference) > 0.001) {
      affectedCount++;
      comparisons.push({
        signalId: signal.id,
        symbol: signal.symbol,
        direction: signal.direction,
        status: signal.status,
        entryPrice,
        currentSl,
        originalSl: slPrice,
        isBreakeven: outcome.isBreakeven,
        oldPnL,
        newPnL,
        difference,
      });
    }
  }

  // –í—ã–≤–æ–¥ —Ä–µ–∑—É–ª—å—Ç–∞—Ç–æ–≤
  console.log('üìä –û–ë–©–ê–Ø –°–¢–ê–¢–ò–°–¢–ò–ö–ê:\n');
  console.log(`–í—Å–µ–≥–æ —Å–∏–≥–Ω–∞–ª–æ–≤: ${allSignals.length}`);
  console.log(`–°–∏–≥–Ω–∞–ª–æ–≤ –≤ breakeven: ${breakevenCount}`);
  console.log(`–°–∏–≥–Ω–∞–ª–æ–≤ —Å –∏–∑–º–µ–Ω–µ–Ω–∏–µ–º PnL: ${affectedCount}\n`);

  console.log('üí∞ –í–õ–ò–Ø–ù–ò–ï –ù–ê –û–ë–©–ò–ô PnL:\n');
  console.log(`–°—Ç–∞—Ä—ã–π –æ–±—â–∏–π PnL: ${totalOldPnL.toFixed(2)}%`);
  console.log(`–ù–æ–≤—ã–π –æ–±—â–∏–π PnL: ${totalNewPnL.toFixed(2)}%`);
  console.log(`–†–∞–∑–Ω–∏—Ü–∞: ${(totalNewPnL - totalOldPnL).toFixed(2)}%\n`);

  if (comparisons.length > 0) {
    console.log('üîÑ –°–ò–ì–ù–ê–õ–´ –° –ò–ó–ú–ï–ù–ï–ù–ò–ï–ú PnL:\n');
    console.log('ID\t–°–∏–º–≤–æ–ª\t\t–°—Ç–∞—Ç—É—Å\t\tBreakeven?\t–°—Ç–∞—Ä—ã–π PnL\t–ù–æ–≤—ã–π PnL\t–†–∞–∑–Ω–∏—Ü–∞');
    console.log('‚îÄ'.repeat(100));

    comparisons.forEach((c) => {
      const be = c.isBreakeven ? '‚úÖ –î–ê' : '‚ùå –ù–ï–¢';
      const oldSign = c.oldPnL >= 0 ? '+' : '';
      const newSign = c.newPnL >= 0 ? '+' : '';
      const diffSign = c.difference >= 0 ? '+' : '';

      console.log(
        `${c.signalId}\t${c.symbol.padEnd(12)}\t${c.status.padEnd(8)}\t${be}\t\t${oldSign}${c.oldPnL.toFixed(2)}%\t\t${newSign}${c.newPnL.toFixed(2)}%\t\t${diffSign}${c.difference.toFixed(2)}%`
      );
    });

    console.log('\nüìù –î–ï–¢–ê–õ–¨–ù–´–ô –ê–ù–ê–õ–ò–ó BREAKEVEN –°–î–ï–õ–û–ö:\n');
    const breakevenSignals = comparisons.filter((c) => c.isBreakeven);
    
    if (breakevenSignals.length > 0) {
      breakevenSignals.forEach((c) => {
        console.log(`\nSignal ID ${c.signalId} (${c.symbol} ${c.direction}):`);
        console.log(`  Entry Price:    ${c.entryPrice.toFixed(8)}`);
        console.log(`  Original SL:    ${c.originalSl.toFixed(8)}`);
        console.log(`  Current SL:     ${c.currentSl.toFixed(8)} (moved to breakeven)`);
        console.log(`  –°—Ç–∞—Ä—ã–π —Ä–∞—Å—á–µ—Ç:  ${c.oldPnL.toFixed(2)}% (–∏—Å–ø–æ–ª—å–∑–æ–≤–∞–ª original SL ‚ùå)`);
        console.log(`  –ù–æ–≤—ã–π —Ä–∞—Å—á–µ—Ç:   ${c.newPnL.toFixed(2)}% (–∏—Å–ø–æ–ª—å–∑—É–µ—Ç current SL ‚úÖ)`);
        console.log(`  –ò—Å–ø—Ä–∞–≤–ª–µ–Ω–∏–µ:    ${c.difference > 0 ? '+' : ''}${c.difference.toFixed(2)}%`);
      });
    } else {
      console.log('  –ù–µ—Ç breakeven —Å–¥–µ–ª–æ–∫ –≤ –±–∞–∑–µ –¥–∞–Ω–Ω—ã—Ö.');
    }
  } else {
    console.log('‚úÖ –ò–∑–º–µ–Ω–µ–Ω–∏–π –≤ PnL –Ω–µ –Ω–∞–π–¥–µ–Ω–æ. –í—Å–µ —Å–∏–≥–Ω–∞–ª—ã —Ä–∞—Å—Å—á–∏—Ç–∞–Ω—ã –æ–¥–∏–Ω–∞–∫–æ–≤–æ.\n');
  }

  console.log('\n‚úÖ –ê–Ω–∞–ª–∏–∑ –∑–∞–≤–µ—Ä—à–µ–Ω!');
  console.log('\nüí° –í–ê–ñ–ù–û: –≠—Ç–∏ –∏–∑–º–µ–Ω–µ–Ω–∏—è —É–∂–µ –ø—Ä–∏–º–µ–Ω–µ–Ω—ã –∞–≤—Ç–æ–º–∞—Ç–∏—á–µ—Å–∫–∏!');
  console.log('   PnL —Ä–∞—Å—Å—á–∏—Ç—ã–≤–∞–µ—Ç—Å—è –¥–∏–Ω–∞–º–∏—á–µ—Å–∫–∏, –ø–æ—ç—Ç–æ–º—É —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞');
  console.log('   —É–∂–µ –æ—Ç–æ–±—Ä–∞–∂–∞–µ—Ç –ø—Ä–∞–≤–∏–ª—å–Ω—ã–µ –∑–Ω–∞—á–µ–Ω–∏—è –±–µ–∑ –º–∏–≥—Ä–∞—Ü–∏–∏ –ë–î.\n');
}

analyzePnLRecalculation()
  .then(() => process.exit(0))
  .catch((error) => {
    console.error('‚ùå –û—à–∏–±–∫–∞:', error);
    process.exit(1);
  });
