import { signalDB } from '../mastra/storage/db';
import { binanceClient } from '../utils/binanceClient';
import { riskCalculator } from '../utils/riskCalculator';
import axios from 'axios';

export class SignalTracker {
  private telegramChatId: string;
  private telegramBotToken: string;

  constructor() {
    this.telegramChatId = process.env.TELEGRAM_CHAT_ID || '';
    this.telegramBotToken = process.env.TELEGRAM_BOT_TOKEN || '';
  }

  async sendTelegramMessage(message: string, replyToMessageId?: number): Promise<void> {
    if (!this.telegramBotToken || !this.telegramChatId) {
      console.warn('‚ö†Ô∏è [SignalTracker] Telegram credentials not configured, skipping message send');
      return;
    }

    try {
      const payload: any = {
        chat_id: this.telegramChatId,
        text: message,
        parse_mode: 'HTML',
      };

      if (replyToMessageId) {
        payload.reply_to_message_id = replyToMessageId;
      }

      await axios.post(`https://api.telegram.org/bot${this.telegramBotToken}/sendMessage`, payload);
      console.log('‚úÖ [SignalTracker] Telegram message sent successfully');
    } catch (error: any) {
      console.error('‚ùå [SignalTracker] Failed to send Telegram message:', error.message);
    }
  }

  async trackSignals(): Promise<void> {
    console.log('\nüëÄ [SignalTracker] Checking open signals...');

    try {
      const openSignals = await signalDB.getOpenSignals();
      console.log(`üìä [SignalTracker] Found ${openSignals.length} open signals`);

      for (const signal of openSignals) {
        try {
          const currentPrice = await binanceClient.getCurrentPrice(signal.symbol);
          
          const { newStatus, newSl } = riskCalculator.checkSignalStatus(
            currentPrice,
            parseFloat(signal.entryPrice),
            parseFloat(signal.currentSl),
            parseFloat(signal.tp1Price),
            parseFloat(signal.tp2Price),
            signal.direction,
            signal.status
          );

          if (newStatus !== signal.status) {
            await signalDB.updateSignalStatus(
              signal.id,
              newStatus as any,
              newSl !== undefined ? newSl.toString() : undefined
            );

            // –û–ø—Ä–µ–¥–µ–ª—è–µ–º —Ç–∏–ø –∑–∞–∫—Ä—ã—Ç–∏—è
            const entryPrice = parseFloat(signal.entryPrice);
            const tp1Price = parseFloat(signal.tp1Price);
            const tp2Price = parseFloat(signal.tp2Price);
            const slPrice = parseFloat(signal.slPrice);
            const isBreakeven = newStatus === 'SL_HIT' && 
              Math.abs(parseFloat(signal.currentSl) - entryPrice) < entryPrice * 0.0001; // 0.01% tolerance

            let statusEmoji: string;
            let statusText: string;
            let pnl = 0;

            if (newStatus === 'TP1_HIT') {
              statusEmoji = 'üéØ';
              statusText = 'TP1 –î–û–°–¢–ò–ì–ù–£–¢! SL –ø–µ—Ä–µ–Ω–µ—Å–µ–Ω –≤ –±–µ–∑—É–±—ã—Ç–æ–∫.';
              // TP1: 50% –ø–æ–∑–∏—Ü–∏–∏ –æ—Ç entry –¥–æ TP1
              if (signal.direction === 'LONG') {
                pnl = ((tp1Price - entryPrice) / entryPrice) * 100 * 0.5;
              } else {
                pnl = ((entryPrice - tp1Price) / entryPrice) * 100 * 0.5;
              }
            } else if (newStatus === 'TP2_HIT') {
              statusEmoji = 'üíé';
              statusText = 'TP2 –î–û–°–¢–ò–ì–ù–£–¢! –ü–æ–ª–Ω–∞—è –ø—Ä–∏–±—ã–ª—å!';
              // TP2: 50% –æ—Ç entry –¥–æ TP1 + 50% –æ—Ç entry –¥–æ TP2
              if (signal.direction === 'LONG') {
                const pnlTp1 = ((tp1Price - entryPrice) / entryPrice) * 100 * 0.5;
                const pnlTp2 = ((tp2Price - entryPrice) / entryPrice) * 100 * 0.5;
                pnl = pnlTp1 + pnlTp2;
              } else {
                const pnlTp1 = ((entryPrice - tp1Price) / entryPrice) * 100 * 0.5;
                const pnlTp2 = ((entryPrice - tp2Price) / entryPrice) * 100 * 0.5;
                pnl = pnlTp1 + pnlTp2;
              }
            } else if (newStatus === 'SL_HIT') {
              if (isBreakeven) {
                statusEmoji = '‚öñÔ∏è';
                statusText = '–ü–æ–∑–∏—Ü–∏—è –∑–∞–∫—Ä—ã—Ç–∞ –≤ –ë–ï–ó–£–ë–´–¢–ö–ï –ø–æ—Å–ª–µ TP1.';
                // Breakeven: 50% –∑–∞–∫—Ä—ã—Ç–æ –Ω–∞ TP1, 50% –≤ –Ω–æ–ª—å
                if (signal.direction === 'LONG') {
                  pnl = ((tp1Price - entryPrice) / entryPrice) * 100 * 0.5;
                } else {
                  pnl = ((entryPrice - tp1Price) / entryPrice) * 100 * 0.5;
                }
              } else {
                statusEmoji = 'üõë';
                statusText = 'STOP LOSS —Å—Ä–∞–±–æ—Ç–∞–ª.';
                // SL: –ø–æ–ª–Ω—ã–π —É–±—ã—Ç–æ–∫
                if (signal.direction === 'LONG') {
                  pnl = ((slPrice - entryPrice) / entryPrice) * 100;
                } else {
                  pnl = ((entryPrice - slPrice) / entryPrice) * 100;
                }
              }
            } else {
              statusEmoji = '‚ùì';
              statusText = '–°—Ç–∞—Ç—É—Å –æ–±–Ω–æ–≤–ª–µ–Ω.';
            }

            // –§–æ—Ä–º–∞—Ç–∏—Ä—É–µ–º PnL
            const pnlSign = pnl >= 0 ? '+' : '';
            const pnlText = pnl !== 0 ? `\nüíµ <b>PnL:</b> ${pnlSign}${pnl.toFixed(2)}%` : '';

            const directionText = signal.direction === 'LONG' ? 'üü¢ LONG' : 'üî¥ SHORT';

            const message = `
${statusEmoji} <b>–û–ë–ù–û–í–õ–ï–ù–ò–ï –°–ò–ì–ù–ê–õ–ê</b> ${statusEmoji}

üÜî Signal ID: ${signal.id}
üíé <b>–ú–æ–Ω–µ—Ç–∞:</b> ${signal.symbol}
üìä <b>–ù–∞–ø—Ä–∞–≤–ª–µ–Ω–∏–µ:</b> ${directionText}
‚è∞ <b>–¢–∞–π–º—Ñ—Ä–µ–π–º:</b> ${signal.timeframe}

<b>${statusText}</b>${pnlText}

üí∞ <b>–¢–µ–∫—É—â–∞—è —Ü–µ–Ω–∞:</b> ${currentPrice.toFixed(8)}
${newSl ? `üîÑ <b>–ù–æ–≤—ã–π SL:</b> ${newSl.toFixed(8)}` : ''}
            `.trim();

            await this.sendTelegramMessage(message, signal.telegramMessageId || undefined);
            console.log(`‚úÖ [SignalTracker] Updated signal ${signal.id} to ${newStatus}${isBreakeven ? ' (BREAKEVEN)' : ''}`);
          }
        } catch (error: any) {
          console.error(`‚ùå [SignalTracker] Error tracking signal ${signal.id}:`, error.message);
        }
      }

      console.log('‚úÖ [SignalTracker] Completed signal tracking');
    } catch (error: any) {
      console.error('‚ùå [SignalTracker] Fatal error during signal tracking:', error.message);
    }
  }
}

export const signalTracker = new SignalTracker();
