import axios from 'axios';
import { signalDB } from '../mastra/storage/db';

export class TelegramBot {
  private botToken: string;
  private chatId: string;
  private offset: number = 0;
  private isPolling: boolean = false;

  constructor() {
    this.botToken = process.env.TELEGRAM_BOT_TOKEN || '';
    this.chatId = process.env.TELEGRAM_CHAT_ID || '';
  }

  async sendMessage(message: string, chatId?: string): Promise<void> {
    const targetChatId = chatId || this.chatId;
    
    if (!this.botToken || !targetChatId) {
      console.warn('‚ö†Ô∏è [TelegramBot] Credentials not configured, skipping message send');
      return;
    }

    try {
      await axios.post(`https://api.telegram.org/bot${this.botToken}/sendMessage`, {
        chat_id: targetChatId,
        text: message,
        parse_mode: 'HTML',
      });
      console.log('‚úÖ [TelegramBot] Message sent successfully');
    } catch (error: any) {
      console.error('‚ùå [TelegramBot] Failed to send message:', error.message);
    }
  }

  async setCommands(): Promise<void> {
    if (!this.botToken) {
      console.warn('‚ö†Ô∏è [TelegramBot] Bot token not configured, skipping commands setup');
      return;
    }

    const commands = [
      { command: 'start', description: 'üöÄ –ó–∞–ø—É—Å—Ç–∏—Ç—å –±–æ—Ç–∞' },
      { command: 'stats', description: 'üìä –°—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞ —Å–∏–≥–Ω–∞–ª–æ–≤' },
      { command: 'help', description: '‚ùì –ü–æ–º–æ—â—å' },
      { command: 'status', description: 'üìà –°—Ç–∞—Ç—É—Å —Å–∫–∞–Ω–µ—Ä–∞' },
    ];

    try {
      await axios.post(`https://api.telegram.org/bot${this.botToken}/setMyCommands`, {
        commands,
      });
      console.log('‚úÖ [TelegramBot] Menu commands set successfully');
    } catch (error: any) {
      console.error('‚ùå [TelegramBot] Failed to set commands:', error.message);
    }
  }

  async sendStartupMessage(): Promise<void> {
    const message = `
üöÄ <b>–ë–û–¢ –ó–ê–ü–£–©–ï–ù</b> üöÄ

‚úÖ –°–∏—Å—Ç–µ–º–∞ —Å–∫–∞–Ω–∏—Ä–æ–≤–∞–Ω–∏—è –ø–∞—Ç—Ç–µ—Ä–Ω–æ–≤ –∞–∫—Ç–∏–≤–Ω–∞

üìä <b>–ù–∞—Å—Ç—Ä–æ–π–∫–∏ —Å–∫–∞–Ω–∏—Ä–æ–≤–∞–Ω–∏—è:</b>
‚Ä¢ –¢–∞–π–º—Ñ—Ä–µ–π–º—ã: 15m, 1h, 4h
‚Ä¢ –ü–∞—Ç—Ç–µ—Ä–Ω—ã: Pin Bar, Fakey, –ü–ü–†, Engulfing
‚Ä¢ –ú–∏–Ω–∏–º–∞–ª—å–Ω—ã–π –æ–±—ä–µ–º: 20M USDT
‚Ä¢ –¢–æ–ª—å–∫–æ USDT –ø–∞—Ä—ã

‚è± <b>–†–∞—Å–ø–∏—Å–∞–Ω–∏–µ —Å–∫–∞–Ω–æ–≤:</b>
‚Ä¢ 15m: –∫–∞–∂–¥—ã–µ 15 –º–∏–Ω—É—Ç (00, 15, 30, 45) + 10—Å–µ–∫
‚Ä¢ 1h: –∫–∞–∂–¥—ã–π —á–∞—Å (XX:00) + 10—Å–µ–∫
‚Ä¢ 4h: –∫–∞–∂–¥—ã–µ 4 —á–∞—Å–∞ (00, 04, 08, 12, 16, 20) + 10—Å–µ–∫
‚Ä¢ –¢—Ä–µ–∫–∏–Ω–≥: –∫–∞–∂–¥—ã–µ 5 –º–∏–Ω—É—Ç

üéØ <b>–ê–≤—Ç–æ–º–∞—Ç–∏—á–µ—Å–∫–∏–π —Ç—Ä–µ–∫–∏–Ω–≥:</b>
‚Ä¢ SL ‚Üí breakeven –ø–æ—Å–ª–µ TP1
‚Ä¢ –£–≤–µ–¥–æ–º–ª–µ–Ω–∏—è –æ –≤—Å–µ—Ö —Å—Ä–∞–±–∞—Ç—ã–≤–∞–Ω–∏—è—Ö

üì± <b>–î–æ—Å—Ç—É–ø–Ω—ã–µ –∫–æ–º–∞–Ω–¥—ã:</b>
/stats - –°—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞ –ø–æ —Å–∏–≥–Ω–∞–ª–∞–º
/status - –°—Ç–∞—Ç—É—Å —Å–∫–∞–Ω–µ—Ä–∞
/help - –ü–æ–º–æ—â—å

–ñ–¥—É –Ω–æ–≤—ã—Ö –ø–∞—Ç—Ç–µ—Ä–Ω–æ–≤! üìà
    `.trim();

    await this.sendMessage(message);
  }

  private async handleCommand(command: string, chatId: string): Promise<void> {
    console.log(`üì® [TelegramBot] Handling command: ${command}`);

    try {
      switch (command) {
        case '/start':
          await this.handleStartCommand(chatId);
          break;
        case '/help':
          await this.handleHelpCommand(chatId);
          break;
        case '/status':
          await this.handleStatusCommand(chatId);
          break;
        case '/stats':
          await this.handleStatsCommand(chatId);
          break;
        default:
          await this.sendMessage('‚ùì –ù–µ–∏–∑–≤–µ—Å—Ç–Ω–∞—è –∫–æ–º–∞–Ω–¥–∞. –ò—Å–ø–æ–ª—å–∑—É–π—Ç–µ /help', chatId);
      }
    } catch (error: any) {
      console.error(`‚ùå [TelegramBot] Error handling command ${command}:`, error.message);
      await this.sendMessage('‚ùå –ü—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞ –ø—Ä–∏ –æ–±—Ä–∞–±–æ—Ç–∫–µ –∫–æ–º–∞–Ω–¥—ã', chatId);
    }
  }

  private async handleStartCommand(chatId: string): Promise<void> {
    const message = `
ü§ñ <b>–î–æ–±—Ä–æ –ø–æ–∂–∞–ª–æ–≤–∞—Ç—å –≤ Crypto Pattern Scanner Bot!</b>

–Ø –∞–≤—Ç–æ–º–∞—Ç–∏—á–µ—Å–∫–∏ —Å–∫–∞–Ω–∏—Ä—É—é —Ä—ã–Ω–æ–∫ –∫—Ä–∏–ø—Ç–æ–≤–∞–ª—é—Ç –∏ –Ω–∞—Ö–æ–∂—É –ø–∞—Ç—Ç–µ—Ä–Ω—ã –¥–ª—è —Ç–æ—Ä–≥–æ–≤–ª–∏.

üìä <b>–ß—Ç–æ —è —É–º–µ—é:</b>
‚Ä¢ –ü–æ–∏—Å–∫ 4 –ø–∞—Ç—Ç–µ—Ä–Ω–æ–≤: Pin Bar, Fakey, –ü–ü–†, Engulfing
‚Ä¢ –ú–æ–Ω–∏—Ç–æ—Ä–∏–Ω–≥ —Ç–∞–π–º—Ñ—Ä–µ–π–º–æ–≤: 15m, 1h, 4h
‚Ä¢ –ê–≤—Ç–æ–º–∞—Ç–∏—á–µ—Å–∫–∏–π —Ä–∞—Å—á–µ—Ç Entry, SL, TP1, TP2
‚Ä¢ –ü–µ—Ä–µ–Ω–æ—Å SL –≤ breakeven –ø–æ—Å–ª–µ TP1
‚Ä¢ –£–≤–µ–¥–æ–º–ª–µ–Ω–∏—è –æ–±–æ –≤—Å–µ—Ö —Å–æ–±—ã—Ç–∏—è—Ö

üì± <b>–ö–æ–º–∞–Ω–¥—ã:</b>
/stats - –°—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞ —Å–∏–≥–Ω–∞–ª–æ–≤
/status - –°—Ç–∞—Ç—É—Å —Å–∫–∞–Ω–µ—Ä–∞
/help - –ü–æ–¥—Ä–æ–±–Ω–∞—è –ø–æ–º–æ—â—å

–ò—Å–ø–æ–ª—å–∑—É–π—Ç–µ –∫–æ–º–∞–Ω–¥—ã –¥–ª—è —É–ø—Ä–∞–≤–ª–µ–Ω–∏—è –±–æ—Ç–æ–º! üöÄ
    `.trim();

    await this.sendMessage(message, chatId);
  }

  private async handleHelpCommand(chatId: string): Promise<void> {
    const message = `
üìö <b>–°–ü–†–ê–í–ö–ê</b>

üì± <b>–ö–æ–º–∞–Ω–¥—ã:</b>
/start - –ü—Ä–∏–≤–µ—Ç—Å—Ç–≤–µ–Ω–Ω–æ–µ —Å–æ–æ–±—â–µ–Ω–∏–µ
/stats - –î–µ—Ç–∞–ª—å–Ω–∞—è —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞ –ø–æ —Å–∏–≥–Ω–∞–ª–∞–º
/status - –¢–µ–∫—É—â–∏–π —Å—Ç–∞—Ç—É—Å –∏ —Ä–∞—Å–ø–∏—Å–∞–Ω–∏–µ
/help - –≠—Ç–∞ —Å–ø—Ä–∞–≤–∫–∞

üîç <b>–§—É–Ω–∫—Ü–∏–∏ –±–æ—Ç–∞:</b>
‚Ä¢ –ê–≤—Ç–æ–º–∞—Ç–∏—á–µ—Å–∫–æ–µ —Å–∫–∞–Ω–∏—Ä–æ–≤–∞–Ω–∏–µ 4 –ø–∞—Ç—Ç–µ—Ä–Ω–æ–≤: Pin Bar, Fakey, –ü–ü–†, Engulfing
‚Ä¢ –ú–æ–Ω–∏—Ç–æ—Ä–∏–Ω–≥ 3 —Ç–∞–π–º—Ñ—Ä–µ–π–º–æ–≤: 15m, 1h, 4h
‚Ä¢ –¢–æ–ª—å–∫–æ USDT –ø–∞—Ä—ã —Å –æ–±—ä–µ–º–æ–º >20M
‚Ä¢ –ê–≤—Ç–æ–º–∞—Ç–∏—á–µ—Å–∫–∏–π —Ä–∞—Å—á–µ—Ç Entry, SL, TP1 (1R), TP2 (2R)
‚Ä¢ –ü–µ—Ä–µ–Ω–æ—Å SL –≤ breakeven –ø–æ—Å–ª–µ –¥–æ—Å—Ç–∏–∂–µ–Ω–∏—è TP1
‚Ä¢ –ú–≥–Ω–æ–≤–µ–Ω–Ω—ã–µ —É–≤–µ–¥–æ–º–ª–µ–Ω–∏—è –æ –Ω–æ–≤—ã—Ö –ø–∞—Ç—Ç–µ—Ä–Ω–∞—Ö
‚Ä¢ –î–µ—Ç–∞–ª—å–Ω–∞—è —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞ –ø–æ –≤—Å–µ–º —Å–∏–≥–Ω–∞–ª–∞–º

üìä <b>–†–∞—Å–ø–∏—Å–∞–Ω–∏–µ —Å–∫–∞–Ω–∏—Ä–æ–≤–∞–Ω–∏—è:</b>
‚Ä¢ 15m: –∫–∞–∂–¥—ã–µ 15 –º–∏–Ω—É—Ç (00, 15, 30, 45) + 10 —Å–µ–∫ –∑–∞–¥–µ—Ä–∂–∫–∞
‚Ä¢ 1h: –∫–∞–∂–¥—ã–π —á–∞—Å (XX:00) + 10 —Å–µ–∫ –∑–∞–¥–µ—Ä–∂–∫–∞
‚Ä¢ 4h: –∫–∞–∂–¥—ã–µ 4 —á–∞—Å–∞ (00, 04, 08, 12, 16, 20) + 10 —Å–µ–∫ –∑–∞–¥–µ—Ä–∂–∫–∞
‚Ä¢ –¢—Ä–µ–∫–∏–Ω–≥: –∫–∞–∂–¥—ã–µ 5 –º–∏–Ω—É—Ç

üéØ <b>–§–æ—Ä–º–∞—Ç —Å–∏–≥–Ω–∞–ª–∞:</b>
–ü—Ä–∏ –æ–±–Ω–∞—Ä—É–∂–µ–Ω–∏–∏ –ø–∞—Ç—Ç–µ—Ä–Ω–∞ –≤—ã –ø–æ–ª—É—á–∏—Ç–µ —Å–æ–æ–±—â–µ–Ω–∏–µ —Å:
‚Ä¢ –ù–∞–∑–≤–∞–Ω–∏–µ –ø–∞—Ç—Ç–µ—Ä–Ω–∞ –∏ –Ω–∞–ø—Ä–∞–≤–ª–µ–Ω–∏–µ (LONG/SHORT)
‚Ä¢ –°–∏–º–≤–æ–ª –∏ —Ç–∞–π–º—Ñ—Ä–µ–π–º
‚Ä¢ Entry (—Ü–µ–Ω–∞ –≤—Ö–æ–¥–∞)
‚Ä¢ SL (—Å—Ç–æ–ø-–ª–æ—Å—Å)
‚Ä¢ TP1 –∏ TP2 (—Ü–µ–ª–∏ –ø—Ä–∏–±—ã–ª–∏)

–£–¥–∞—á–Ω–æ–π —Ç–æ—Ä–≥–æ–≤–ª–∏! üìà
    `.trim();

    await this.sendMessage(message, chatId);
  }

  private async handleStatusCommand(chatId: string): Promise<void> {
    const message = `
üìà <b>–°–¢–ê–¢–£–° –°–ö–ê–ù–ï–†–ê</b>

üü¢ <b>–°—Ç–∞—Ç—É—Å:</b> –ê–∫—Ç–∏–≤–µ–Ω

‚è± <b>–†–∞—Å–ø–∏—Å–∞–Ω–∏–µ —Å–∫–∞–Ω–∏—Ä–æ–≤–∞–Ω–∏—è:</b>
‚Ä¢ <b>15m:</b> –∫–∞–∂–¥—ã–µ 15 –º–∏–Ω—É—Ç (00, 15, 30, 45) + 10—Å–µ–∫
‚Ä¢ <b>1h:</b> –∫–∞–∂–¥—ã–π —á–∞—Å (XX:00) + 10—Å–µ–∫
‚Ä¢ <b>4h:</b> –∫–∞–∂–¥—ã–µ 4 —á–∞—Å–∞ (00, 04, 08, 12, 16, 20) + 10—Å–µ–∫

üîÑ <b>–¢—Ä–µ–∫–∏–Ω–≥ —Å–∏–≥–Ω–∞–ª–æ–≤:</b>
–ö–∞–∂–¥—ã–µ 5 –º–∏–Ω—É—Ç –ø—Ä–æ–≤–µ—Ä—è—é –æ—Ç–∫—Ä—ã—Ç—ã–µ —Å–∏–≥–Ω–∞–ª—ã –∏ –∞–≤—Ç–æ–º–∞—Ç–∏—á–µ—Å–∫–∏ –ø–µ—Ä–µ–Ω–æ—à—É SL –≤ breakeven –ø–æ—Å–ª–µ –¥–æ—Å—Ç–∏–∂–µ–Ω–∏—è TP1.

üìä <b>–ù–∞—Å—Ç—Ä–æ–π–∫–∏:</b>
‚Ä¢ –ü–∞—Ç—Ç–µ—Ä–Ω—ã: Pin Bar, Fakey, –ü–ü–†, Engulfing
‚Ä¢ –¢–∞–π–º—Ñ—Ä–µ–π–º—ã: 15m, 1h, 4h
‚Ä¢ –ú–∏–Ω–∏–º–∞–ª—å–Ω—ã–π –æ–±—ä–µ–º: 20M USDT
‚Ä¢ –¢–æ–ª—å–∫–æ USDT –ø–∞—Ä—ã

‚úÖ –ë–æ—Ç —Ä–∞–±–æ—Ç–∞–µ—Ç –≤ –Ω–æ—Ä–º–∞–ª—å–Ω–æ–º —Ä–µ–∂–∏–º–µ!
    `.trim();

    await this.sendMessage(message, chatId);
  }

  private async handleStatsCommand(chatId: string): Promise<void> {
    console.log('üìä [TelegramBot] Fetching statistics...');
    
    const stats = await signalDB.getStatistics();

    if (stats.total === 0) {
      const message = `
üìä <b>–°–¢–ê–¢–ò–°–¢–ò–ö–ê –°–ò–ì–ù–ê–õ–û–í</b>

üì≠ –ü–æ–∫–∞ –Ω–µ—Ç —Å–∏–≥–Ω–∞–ª–æ–≤.

–ë–æ—Ç –∞–∫—Ç–∏–≤–Ω–æ —Å–∫–∞–Ω–∏—Ä—É–µ—Ç —Ä—ã–Ω–æ–∫ –∏ –æ—Ç–ø—Ä–∞–≤–∏—Ç —É–≤–µ–¥–æ–º–ª–µ–Ω–∏–µ –ø—Ä–∏ –æ–±–Ω–∞—Ä—É–∂–µ–Ω–∏–∏ –ø–∞—Ç—Ç–µ—Ä–Ω–∞!

‚è± –°–ª–µ–¥—É—é—â–µ–µ —Å–∫–∞–Ω–∏—Ä–æ–≤–∞–Ω–∏–µ —Å–æ–≥–ª–∞—Å–Ω–æ —Ä–∞—Å–ø–∏—Å–∞–Ω–∏—é.
      `.trim();
      
      await this.sendMessage(message, chatId);
      return;
    }

    const closedSignals = stats.tp1Hit + stats.tp2Hit + stats.tp3Hit + stats.breakevenHit + stats.slHit;
    const winRate1 = closedSignals > 0 
      ? ((stats.tp1Hit + stats.tp2Hit + stats.tp3Hit + stats.breakevenHit) / closedSignals * 100).toFixed(1)
      : '0.0';
    const winRate2 = closedSignals > 0
      ? ((stats.tp2Hit + stats.tp3Hit) / closedSignals * 100).toFixed(1)
      : '0.0';
    
    // –°—Ä–µ–¥–Ω–∏–π PnL –Ω–∞ —Å–¥–µ–ª–∫—É
    const avgPnl = closedSignals > 0 ? (stats.pnlNet / closedSignals).toFixed(2) : '0.00';
    const pnlEmoji = stats.pnlNet > 0 ? '‚úÖ' : stats.pnlNet < 0 ? '‚ùå' : '‚ö™';
    const avgPnlEmoji = parseFloat(avgPnl) >= 1.5 ? 'üéØ' : parseFloat(avgPnl) > 0 ? '‚úÖ' : '‚ùå';

    let message = `
üìä <b>–°–¢–ê–¢–ò–°–¢–ò–ö–ê –°–ò–ì–ù–ê–õ–û–í</b>

üìà <b>–û–±—â–∞—è —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞:</b>
‚Ä¢ –í—Å–µ–≥–æ —Å–∏–≥–Ω–∞–ª–æ–≤: ${stats.total}
‚Ä¢ –û—Ç–∫—Ä—ã—Ç–æ: ${stats.open}
‚Ä¢ –ó–∞–∫—Ä—ã—Ç–æ: ${closedSignals}

üéØ <b>–†–µ–∑—É–ª—å—Ç–∞—Ç—ã –∑–∞–∫—Ä—ã—Ç—ã—Ö:</b>
‚Ä¢ TP1 –¥–æ—Å—Ç–∏–≥–Ω—É—Ç: ${stats.tp1Hit}
‚Ä¢ TP2 –¥–æ—Å—Ç–∏–≥–Ω—É—Ç: ${stats.tp2Hit}
‚Ä¢ TP3 –¥–æ—Å—Ç–∏–≥–Ω—É—Ç: ${stats.tp3Hit}
‚Ä¢ Breakeven: ${stats.breakevenHit} ‚öñÔ∏è
‚Ä¢ SL —Å—Ä–∞–±–æ—Ç–∞–ª: ${stats.slHit}

üìä <b>Win Rate:</b>
‚Ä¢ Win rate (TP1+TP2+TP3+BE): ${winRate1}%
‚Ä¢ Win rate (TP2+TP3): ${winRate2}%

üí∞ <b>PnL:</b>
${pnlEmoji} <b>Net PnL: ${stats.pnlNet >= 0 ? '+' : ''}${stats.pnlNet.toFixed(2)}%</b>
${avgPnlEmoji} <b>–°—Ä–µ–¥–Ω–∏–π PnL: ${parseFloat(avgPnl) >= 0 ? '+' : ''}${avgPnl}%</b> (—Ü–µ–ª—å: +1.5%+)
‚Ä¢ PnL+: ${stats.pnlPositive.toFixed(2)}%
‚Ä¢ PnL-: ${stats.pnlNegative.toFixed(2)}%

`;

    // Statistics by pattern
    if (Object.keys(stats.byPattern).length > 0) {
      message += `üìä <b>–ü–æ –ø–∞—Ç—Ç–µ—Ä–Ω–∞–º:</b>\n`;
      for (const [pattern, pStatsRaw] of Object.entries(stats.byPattern)) {
        const pStats = pStatsRaw as { total: number; tp1: number; tp2: number; tp3: number; breakeven: number; sl: number; open: number; pnlPositive: number; pnlNegative: number; pnlNet: number };
        const pClosedSignals = pStats.tp1 + pStats.tp2 + pStats.tp3 + pStats.breakeven + pStats.sl;
        const pWinRate = pClosedSignals > 0
          ? (((pStats.tp1 + pStats.tp2 + pStats.tp3 + pStats.breakeven) / pClosedSignals) * 100).toFixed(1)
          : '0.0';
        message += `\n<b>${pattern}:</b>\n`;
        message += `  ‚Ä¢ –í—Å–µ–≥–æ: ${pStats.total} | –ó–∞–∫—Ä—ã—Ç–æ: ${pClosedSignals}\n`;
        message += `  ‚Ä¢ TP1: ${pStats.tp1} | TP2: ${pStats.tp2} | TP3: ${pStats.tp3} | BE: ${pStats.breakeven} | SL: ${pStats.sl}\n`;
        message += `  ‚Ä¢ Win rate: ${pWinRate}%\n`;
        message += `  ‚Ä¢ PnL: ${pStats.pnlNet >= 0 ? '+' : ''}${pStats.pnlNet.toFixed(2)}% (${pStats.pnlPositive.toFixed(2)}% / ${pStats.pnlNegative.toFixed(2)}%)\n`;
      }
      message += '\n';
    }

    // Statistics by timeframe
    if (Object.keys(stats.byTimeframe).length > 0) {
      message += `‚è± <b>–ü–æ —Ç–∞–π–º—Ñ—Ä–µ–π–º–∞–º:</b>\n`;
      for (const [tf, tfStatsRaw] of Object.entries(stats.byTimeframe)) {
        const tfStats = tfStatsRaw as { total: number; tp1: number; tp2: number; tp3: number; breakeven: number; sl: number; open: number; pnlPositive: number; pnlNegative: number; pnlNet: number };
        const tfClosedSignals = tfStats.tp1 + tfStats.tp2 + tfStats.tp3 + tfStats.breakeven + tfStats.sl;
        const tfWinRate = tfClosedSignals > 0
          ? (((tfStats.tp1 + tfStats.tp2 + tfStats.tp3 + tfStats.breakeven) / tfClosedSignals) * 100).toFixed(1)
          : '0.0';
        message += `\n<b>${tf}:</b>\n`;
        message += `  ‚Ä¢ –í—Å–µ–≥–æ: ${tfStats.total} | –ó–∞–∫—Ä—ã—Ç–æ: ${tfClosedSignals}\n`;
        message += `  ‚Ä¢ TP1: ${tfStats.tp1} | TP2: ${tfStats.tp2} | TP3: ${tfStats.tp3} | BE: ${tfStats.breakeven} | SL: ${tfStats.sl}\n`;
        message += `  ‚Ä¢ Win rate: ${tfWinRate}%\n`;
        message += `  ‚Ä¢ PnL: ${tfStats.pnlNet >= 0 ? '+' : ''}${tfStats.pnlNet.toFixed(2)}% (${tfStats.pnlPositive.toFixed(2)}% / ${tfStats.pnlNegative.toFixed(2)}%)\n`;
      }
      message += '\n';
    }

    // Statistics by direction
    const longClosedSignals = stats.byDirection.LONG.tp1 + stats.byDirection.LONG.tp2 + stats.byDirection.LONG.tp3 + stats.byDirection.LONG.breakeven + stats.byDirection.LONG.sl;
    const shortClosedSignals = stats.byDirection.SHORT.tp1 + stats.byDirection.SHORT.tp2 + stats.byDirection.SHORT.tp3 + stats.byDirection.SHORT.breakeven + stats.byDirection.SHORT.sl;
    const longWinRate = longClosedSignals > 0
      ? (((stats.byDirection.LONG.tp1 + stats.byDirection.LONG.tp2 + stats.byDirection.LONG.tp3 + stats.byDirection.LONG.breakeven) / longClosedSignals) * 100).toFixed(1)
      : '0.0';
    const shortWinRate = shortClosedSignals > 0
      ? (((stats.byDirection.SHORT.tp1 + stats.byDirection.SHORT.tp2 + stats.byDirection.SHORT.tp3 + stats.byDirection.SHORT.breakeven) / shortClosedSignals) * 100).toFixed(1)
      : '0.0';

    message += `
üéØ <b>–ü–æ –Ω–∞–ø—Ä–∞–≤–ª–µ–Ω–∏—è–º:</b>

<b>LONG:</b>
  ‚Ä¢ –í—Å–µ–≥–æ: ${stats.byDirection.LONG.total} | –ó–∞–∫—Ä—ã—Ç–æ: ${longClosedSignals}
  ‚Ä¢ TP1: ${stats.byDirection.LONG.tp1} | TP2: ${stats.byDirection.LONG.tp2} | TP3: ${stats.byDirection.LONG.tp3} | BE: ${stats.byDirection.LONG.breakeven} | SL: ${stats.byDirection.LONG.sl}
  ‚Ä¢ Win rate: ${longWinRate}%
  ‚Ä¢ PnL: ${stats.byDirection.LONG.pnlNet >= 0 ? '+' : ''}${stats.byDirection.LONG.pnlNet.toFixed(2)}% (${stats.byDirection.LONG.pnlPositive.toFixed(2)}% / ${stats.byDirection.LONG.pnlNegative.toFixed(2)}%)

<b>SHORT:</b>
  ‚Ä¢ –í—Å–µ–≥–æ: ${stats.byDirection.SHORT.total} | –ó–∞–∫—Ä—ã—Ç–æ: ${shortClosedSignals}
  ‚Ä¢ TP1: ${stats.byDirection.SHORT.tp1} | TP2: ${stats.byDirection.SHORT.tp2} | TP3: ${stats.byDirection.SHORT.tp3} | BE: ${stats.byDirection.SHORT.breakeven} | SL: ${stats.byDirection.SHORT.sl}
  ‚Ä¢ Win rate: ${shortWinRate}%
  ‚Ä¢ PnL: ${stats.byDirection.SHORT.pnlNet >= 0 ? '+' : ''}${stats.byDirection.SHORT.pnlNet.toFixed(2)}% (${stats.byDirection.SHORT.pnlPositive.toFixed(2)}% / ${stats.byDirection.SHORT.pnlNegative.toFixed(2)}%)
`;

    await this.sendMessage(message.trim(), chatId);
  }

  async startPolling(): Promise<void> {
    if (!this.botToken) {
      console.error('‚ùå [TelegramBot] Cannot start polling: bot token not configured');
      return;
    }

    if (this.isPolling) {
      console.warn('‚ö†Ô∏è [TelegramBot] Polling is already running');
      return;
    }

    this.isPolling = true;
    console.log('üîÑ [TelegramBot] Starting polling...');

    // Delete webhook to enable polling
    try {
      await axios.post(`https://api.telegram.org/bot${this.botToken}/deleteWebhook`);
      console.log('‚úÖ [TelegramBot] Webhook deleted, polling enabled');
    } catch (error: any) {
      console.error('‚ùå [TelegramBot] Failed to delete webhook:', error.message);
    }

    this.poll();
  }

  private async poll(): Promise<void> {
    while (this.isPolling) {
      try {
        const response = await axios.get(
          `https://api.telegram.org/bot${this.botToken}/getUpdates`,
          {
            params: {
              offset: this.offset,
              timeout: 30, // Long polling timeout
              allowed_updates: ['message'],
            },
            timeout: 35000, // Slightly longer than Telegram timeout
          }
        );

        const updates = response.data.result;

        for (const update of updates) {
          this.offset = update.update_id + 1;

          if (update.message && update.message.text) {
            const chatId = update.message.chat.id.toString();
            const text = update.message.text;
            
            console.log(`üì® [TelegramBot] Received message from ${chatId}: ${text}`);

            // Handle commands
            if (text.startsWith('/')) {
              await this.handleCommand(text, chatId);
            }
          }
        }
      } catch (error: any) {
        if (error.code === 'ECONNABORTED' || error.code === 'ETIMEDOUT') {
          // Timeout is normal for long polling, continue
          continue;
        }
        console.error('‚ùå [TelegramBot] Polling error:', error.message);
        await new Promise(resolve => setTimeout(resolve, 5000)); // Wait 5 seconds before retry
      }
    }
  }

  stopPolling(): void {
    console.log('üõë [TelegramBot] Stopping polling...');
    this.isPolling = false;
  }
}

export const telegramBot = new TelegramBot();
