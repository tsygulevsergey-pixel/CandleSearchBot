/**
 * Trade Outcomes Utility
 * 
 * –¶–µ–Ω—Ç—Ä–∞–ª–∏–∑–æ–≤–∞–Ω–Ω–∞—è –ª–æ–≥–∏–∫–∞ –¥–ª—è —Ä–∞—Å—á–µ—Ç–∞ PnL –∏ –æ–ø—Ä–µ–¥–µ–ª–µ–Ω–∏—è —Ç–∏–ø–∞ –∑–∞–∫—Ä—ã—Ç–∏—è —Å–¥–µ–ª–∫–∏.
 * –ò—Å–ø–æ–ª—å–∑—É–µ—Ç—Å—è –≤ signalTracker.ts –∏ db.ts –¥–ª—è –æ–±–µ—Å–ø–µ—á–µ–Ω–∏—è –∫–æ–Ω—Å–∏—Å—Ç–µ–Ω—Ç–Ω–æ—Å—Ç–∏.
 * 
 * SUPPORTS DYNAMIC & FIXED STRATEGIES:
 * - Fixed (default): 50%/30%/20% at 1R/2R/3R (for backward compatibility)
 * - Dynamic: Custom %s and Rs based on market conditions (new signals)
 * 
 * PnL CALCULATION EXAMPLES (Fixed):
 * - TP3 full win: 0.5√ó1R + 0.3√ó2R + 0.2√ó3R = 1.7R
 * - TP2 then BE: 0.5√ó1R + 0.3√ó2R + 0.2√ó0R = 1.1R
 * - TP1 then BE: 0.5√ó1R + 0.5√ó0R = 0.5R
 * - SL before TP1: 1.0√ó(-1R) = -1R
 * 
 * PnL CALCULATION EXAMPLES (Dynamic):
 * - Conservative (60%/30%/10% at 0.8R/1.8R/2.5R): 0.6√ó0.8 + 0.3√ó1.8 + 0.1√ó2.5 = 1.27R
 * - Aggressive (30%/30%/40% at 1.2R/2.5R/4R): 0.3√ó1.2 + 0.3√ó2.5 + 0.4√ó4 = 2.47R
 */

export interface TradeOutcome {
  pnl: number; // PnL in percentage
  pnlR: number; // PnL in R units (risk units)
  isBreakeven: boolean;
  outcomeType: 'TP1_HIT' | 'TP2_HIT' | 'TP3_HIT' | 'SL_HIT' | 'BE_HIT' | 'OPEN';
  description: string;
}

interface TradeParams {
  status: string;
  direction: 'LONG' | 'SHORT';
  entryPrice: string;
  tp1Price?: string; // Optional for backward compatibility
  tp2Price: string;
  tp3Price?: string; // Optional for backward compatibility
  slPrice: string;
  currentSl: string;
  partialClosed?: number; // For BE_HIT scenario: how much was already closed (0-100)
  
  // NEW: Dynamic strategy parameters (optional - if not provided, uses defaults)
  customPercents?: { p1: number; p2: number; p3: number }; // Custom partial close %s
  actualTpR?: { tp1R: number; tp2R: number; tp3R: number }; // Actual TP levels in R units
}

/**
 * –î–æ–ø—É—Å–∫ –¥–ª—è –æ–ø—Ä–µ–¥–µ–ª–µ–Ω–∏—è breakeven (0.01% –æ—Ç entry price)
 */
const BREAKEVEN_TOLERANCE = 0.0001;

/**
 * –ü—Ä–æ–≤–µ—Ä—è–µ—Ç, –Ω–∞—Ö–æ–¥–∏—Ç—Å—è –ª–∏ currentSl –≤ –∑–æ–Ω–µ –±–µ–∑—É–±—ã—Ç–∫–∞
 */
export function isBreakevenSL(currentSl: number, entryPrice: number): boolean {
  return Math.abs(currentSl - entryPrice) < entryPrice * BREAKEVEN_TOLERANCE;
}

/**
 * –†–∞—Å—Å—á–∏—Ç—ã–≤–∞–µ—Ç –ø—Ä–æ—Ü–µ–Ω—Ç –ø–æ–∑–∏—Ü–∏–∏, –∫–æ—Ç–æ—Ä–∞—è –±—ã–ª–∞ –∑–∞–∫—Ä—ã—Ç–∞ —á–∞—Å—Ç–∏—á–Ω–æ
 * 
 * SUPPORTS DYNAMIC & FIXED STRATEGIES:
 * - If customPercents provided ‚Üí uses dynamic %s (new signals)
 * - If not provided ‚Üí uses defaults 50/30/20 (old signals, backward compatibility)
 * 
 * @param status - —Ç–µ–∫—É—â–∏–π —Å—Ç–∞—Ç—É—Å —Å–∏–≥–Ω–∞–ª–∞
 * @param previousPartialClosed - –ø—Ä–µ–¥—ã–¥—É—â–∏–π –ø—Ä–æ—Ü–µ–Ω—Ç –∑–∞–∫—Ä—ã—Ç–∏—è (–¥–ª—è BE_HIT)
 * @param customPercents - –∫–∞—Å—Ç–æ–º–Ω—ã–µ –ø—Ä–æ—Ü–µ–Ω—Ç—ã –¥–ª—è –¥–∏–Ω–∞–º–∏—á–µ—Å–∫–æ–π —Å—Ç—Ä–∞—Ç–µ–≥–∏–∏ (optional)
 * @returns –ø—Ä–æ—Ü–µ–Ω—Ç –∑–∞–∫—Ä—ã—Ç–æ–π –ø–æ–∑–∏—Ü–∏–∏ (0-100)
 */
export function calculatePartialClosedPercent(
  status: string,
  previousPartialClosed?: number,
  customPercents?: { p1: number; p2: number; p3: number }
): number {
  console.log(`üìä [TradeOutcomes] calculatePartialClosedPercent: status=${status}, custom=${JSON.stringify(customPercents)}`);

  // ‚úÖ Dynamic strategy (if customPercents provided)
  if (customPercents) {
    switch (status) {
      case 'OPEN':
        return 0;
      case 'TP1_HIT':
        return customPercents.p1; // Dynamic % at TP1
      case 'TP2_HIT':
        return customPercents.p1 + customPercents.p2; // Cumulative
      case 'TP3_HIT':
      case 'BE_HIT':
      case 'SL_HIT':
        return 100; // Full position closed
      default:
        return 0;
    }
  }

  // ‚úÖ Fixed strategy (defaults for backward compatibility)
  switch (status) {
    case 'OPEN':
      return 0;
    case 'TP1_HIT':
      return 50; // Default: Close 50% at TP1
    case 'TP2_HIT':
      return 80; // Default: Close 30% more (total 80%)
    case 'TP3_HIT':
    case 'BE_HIT':  // BE_HIT closes remaining position = 100%
    case 'SL_HIT':
      return 100; // Full position closed
    default:
      return 0;
  }
}

/**
 * –†–∞—Å—Å—á–∏—Ç—ã–≤–∞–µ—Ç PnL –∏ –æ–ø—Ä–µ–¥–µ–ª—è–µ—Ç —Ç–∏–ø –∑–∞–∫—Ä—ã—Ç–∏—è —Å–¥–µ–ª–∫–∏
 * 
 * SUPPORTS DYNAMIC & FIXED STRATEGIES:
 * - Fixed (default): 50%/30%/20% at 1R/2R/3R (backward compatibility)
 * - Dynamic: Custom %s and Rs from dynamicPositionManager (new signals)
 * 
 * @param params - –ø–∞—Ä–∞–º–µ—Ç—Ä—ã —Å–¥–µ–ª–∫–∏ (–≤–∫–ª—é—á–∞—è –æ–ø—Ü–∏–æ–Ω–∞–ª—å–Ω—ã–µ customPercents –∏ actualTpR)
 * @returns TradeOutcome —Å PnL (–≤ % –∏ R), —Ç–∏–ø–æ–º –∑–∞–∫—Ä—ã—Ç–∏—è –∏ –æ–ø–∏—Å–∞–Ω–∏–µ–º
 */
export function calculateTradeOutcome(params: TradeParams): TradeOutcome {
  const {
    status,
    direction,
    entryPrice: entryStr,
    tp1Price: tp1Str,
    tp2Price: tp2Str,
    tp3Price: tp3Str,
    slPrice: slStr,
    currentSl: currentSlStr,
    partialClosed,
    customPercents,  // NEW: dynamic %s
    actualTpR,       // NEW: actual TP levels in R
  } = params;

  const entryPrice = parseFloat(entryStr);
  const tp1Price = tp1Str ? parseFloat(tp1Str) : entryPrice; // Fallback to entry
  const tp2Price = parseFloat(tp2Str);
  const tp3Price = tp3Str ? parseFloat(tp3Str) : null;
  const slPrice = parseFloat(slStr);
  const currentSl = parseFloat(currentSlStr);

  console.log(`üí∞ [TradeOutcomes] Calculating for ${status} ${direction}:`, {
    entry: entryPrice.toFixed(8),
    tp1: tp1Price.toFixed(8),
    tp2: tp2Price.toFixed(8),
    tp3: tp3Price?.toFixed(8) || 'null',
    sl: slPrice.toFixed(8),
    currentSl: currentSl.toFixed(8),
    partialClosed,
    customPercents: customPercents ? `${customPercents.p1}/${customPercents.p2}/${customPercents.p3}` : 'default',
    actualTpR: actualTpR ? `${actualTpR.tp1R}R/${actualTpR.tp2R}R/${actualTpR.tp3R}R` : 'default',
  });

  // Calculate R (risk) as distance from entry to initial SL
  const R = Math.abs(entryPrice - slPrice);
  
  // ‚úÖ Extract %s: use custom if provided, otherwise defaults
  const p1 = customPercents?.p1 || 50;
  const p2 = customPercents?.p2 || 30;
  const p3 = customPercents?.p3 || 20;
  
  // ‚úÖ Extract R levels: use actual if provided, otherwise calculate from prices
  let tp1R: number, tp2R: number, tp3R: number;
  if (actualTpR) {
    tp1R = actualTpR.tp1R;
    tp2R = actualTpR.tp2R;
    tp3R = actualTpR.tp3R;
  } else {
    // Calculate from prices (fallback for old signals)
    tp1R = Math.abs(tp1Price - entryPrice) / R;
    tp2R = Math.abs(tp2Price - entryPrice) / R;
    tp3R = tp3Price ? Math.abs(tp3Price - entryPrice) / R : 3.0;
  }

  let pnlR = 0; // PnL in R units
  let outcomeType: TradeOutcome['outcomeType'] = 'OPEN';
  let description = '';
  let breakeven = false;

  if (status === 'OPEN') {
    outcomeType = 'OPEN';
    description = '–ü–æ–∑–∏—Ü–∏—è –æ—Ç–∫—Ä—ã—Ç–∞';
    pnlR = 0;
  } else if (status === 'TP1_HIT') {
    outcomeType = 'TP1_HIT';
    description = `TP1 –¥–æ—Å—Ç–∏–≥–Ω—É—Ç (${p1}% –∑–∞–∫—Ä—ã—Ç–æ)`;
    // TP1: p1% closed at tp1R
    pnlR = (p1 / 100) * tp1R;
    console.log(`üéØ [TradeOutcomes] TP1_HIT: ${p1}% √ó ${tp1R.toFixed(2)}R = ${pnlR.toFixed(2)}R`);
  } else if (status === 'TP2_HIT') {
    outcomeType = 'TP2_HIT';
    description = `TP2 –¥–æ—Å—Ç–∏–≥–Ω—É—Ç (${p1 + p2}% –∑–∞–∫—Ä—ã—Ç–æ)`;
    // TP2: p1% at tp1R + p2% at tp2R
    pnlR = (p1 / 100) * tp1R + (p2 / 100) * tp2R;
    console.log(`üéØüéØ [TradeOutcomes] TP2_HIT: ${p1}%√ó${tp1R.toFixed(2)}R + ${p2}%√ó${tp2R.toFixed(2)}R = ${pnlR.toFixed(2)}R`);
  } else if (status === 'TP3_HIT') {
    outcomeType = 'TP3_HIT';
    description = 'TP3 –¥–æ—Å—Ç–∏–≥–Ω—É—Ç (–ø–æ–ª–Ω–∞—è –ø—Ä–∏–±—ã–ª—å)';
    // TP3: p1% at tp1R + p2% at tp2R + p3% at tp3R
    pnlR = (p1 / 100) * tp1R + (p2 / 100) * tp2R + (p3 / 100) * tp3R;
    console.log(`üéØüéØüéØ [TradeOutcomes] TP3_HIT: ${p1}%√ó${tp1R.toFixed(2)}R + ${p2}%√ó${tp2R.toFixed(2)}R + ${p3}%√ó${tp3R.toFixed(2)}R = ${pnlR.toFixed(2)}R`);
  } else if (status === 'SL_HIT') {
    outcomeType = 'SL_HIT';
    description = 'Stop Loss —Å—Ä–∞–±–æ—Ç–∞–ª';
    // SL: Full position stopped out = -1R
    pnlR = -1.0;
    console.log(`üõë [TradeOutcomes] SL_HIT: 100% √ó -1R = ${pnlR.toFixed(2)}R`);
  } else if (status === 'BE_HIT') {
    outcomeType = 'BE_HIT';
    breakeven = true;

    // BE_HIT: Breakeven hit after partial close
    // Calculate based on how much was already closed (using custom or default %s)
    const closedAtTP1 = p1;
    const closedAtTP2 = p1 + p2;
    
    if (partialClosed === closedAtTP1) {
      // After TP1: p1% at tp1R + remaining at 0R
      pnlR = (p1 / 100) * tp1R + ((100 - p1) / 100) * 0;
      description = `Breakeven –ø–æ—Å–ª–µ TP1 (${p1}% –ø—Ä–∏–±—ã–ª—å)`;
      console.log(`‚öñÔ∏è [TradeOutcomes] BE_HIT after TP1: ${p1}%√ó${tp1R.toFixed(2)}R + ${100-p1}%√ó0R = ${pnlR.toFixed(2)}R`);
    } else if (partialClosed === closedAtTP2) {
      // After TP2: p1% at tp1R + p2% at tp2R + remaining at 0R
      pnlR = (p1 / 100) * tp1R + (p2 / 100) * tp2R + (p3 / 100) * 0;
      description = `Breakeven –ø–æ—Å–ª–µ TP2 (${closedAtTP2}% –ø—Ä–∏–±—ã–ª—å)`;
      console.log(`‚öñÔ∏è [TradeOutcomes] BE_HIT after TP2: ${p1}%√ó${tp1R.toFixed(2)}R + ${p2}%√ó${tp2R.toFixed(2)}R + ${p3}%√ó0R = ${pnlR.toFixed(2)}R`);
    } else {
      // Unknown: assume after TP1 (safest assumption)
      pnlR = (p1 / 100) * tp1R;
      description = 'Breakeven —Å—Ä–∞–±–æ—Ç–∞–ª (—á–∞—Å—Ç–∏—á–Ω–∞—è –ø—Ä–∏–±—ã–ª—å)';
      console.log(`‚öñÔ∏è [TradeOutcomes] BE_HIT (default): ${p1}%√ó${tp1R.toFixed(2)}R = ${pnlR.toFixed(2)}R`);
    }
  }

  // Convert pnlR to pnlPercent
  // pnlPercent = pnlR √ó (R / entryPrice) √ó 100
  const pnlPercent = (pnlR * R / entryPrice) * 100;

  console.log(`üí∞ [TradeOutcomes] Result: pnlR=${pnlR.toFixed(4)}, pnlPercent=${pnlPercent.toFixed(4)}%, outcome=${outcomeType}`);

  return {
    pnl: pnlPercent,
    pnlR,
    isBreakeven: breakeven,
    outcomeType,
    description,
  };
}

/**
 * –§–æ—Ä–º–∞—Ç–∏—Ä—É–µ—Ç PnL –¥–ª—è –æ—Ç–æ–±—Ä–∞–∂–µ–Ω–∏—è –≤ Telegram
 */
export function formatPnL(pnl: number): string {
  const sign = pnl >= 0 ? '+' : '';
  return `${sign}${pnl.toFixed(2)}%`;
}

/**
 * –§–æ—Ä–º–∞—Ç–∏—Ä—É–µ—Ç PnL –≤ R –µ–¥–∏–Ω–∏—Ü–∞—Ö –¥–ª—è –æ—Ç–æ–±—Ä–∞–∂–µ–Ω–∏—è –≤ Telegram
 */
export function formatPnLR(pnlR: number): string {
  const sign = pnlR >= 0 ? '+' : '';
  return `${sign}${pnlR.toFixed(2)}R`;
}

/**
 * –ü–æ–ª—É—á–∞–µ—Ç —ç–º–æ–¥–∑–∏ –¥–ª—è —Å—Ç–∞—Ç—É—Å–∞ —Å–¥–µ–ª–∫–∏
 */
export function getStatusEmoji(outcomeType: TradeOutcome['outcomeType']): string {
  switch (outcomeType) {
    case 'TP1_HIT':
      return 'üéØ';
    case 'TP2_HIT':
      return 'üéØüéØ';
    case 'TP3_HIT':
      return 'üíé';
    case 'SL_HIT':
      return 'üõë';
    case 'BE_HIT':
      return '‚öñÔ∏è';
    case 'OPEN':
      return 'üìä';
    default:
      return '‚ùì';
  }
}
