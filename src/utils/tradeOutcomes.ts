/**
 * Trade Outcomes Utility
 * 
 * –¶–µ–Ω—Ç—Ä–∞–ª–∏–∑–æ–≤–∞–Ω–Ω–∞—è –ª–æ–≥–∏–∫–∞ –¥–ª—è —Ä–∞—Å—á–µ—Ç–∞ PnL –∏ –æ–ø—Ä–µ–¥–µ–ª–µ–Ω–∏—è —Ç–∏–ø–∞ –∑–∞–∫—Ä—ã—Ç–∏—è —Å–¥–µ–ª–∫–∏.
 * –ò—Å–ø–æ–ª—å–∑—É–µ—Ç—Å—è –≤ signalTracker.ts –∏ db.ts –¥–ª—è –æ–±–µ—Å–ø–µ—á–µ–Ω–∏—è –∫–æ–Ω—Å–∏—Å—Ç–µ–Ω—Ç–Ω–æ—Å—Ç–∏.
 */

export interface TradeOutcome {
  pnl: number;
  isBreakeven: boolean;
  outcomeType: 'TP1_HIT' | 'TP2_HIT' | 'SL_HIT' | 'SL_BREAKEVEN' | 'OPEN';
  description: string;
}

interface TradeParams {
  status: string;
  direction: 'LONG' | 'SHORT';
  entryPrice: string;
  tp1Price: string;
  tp2Price: string;
  slPrice: string;
  currentSl: string;
}

/**
 * –î–æ–ø—É—Å–∫ –¥–ª—è –æ–ø—Ä–µ–¥–µ–ª–µ–Ω–∏—è breakeven (0.01% –æ—Ç entry price)
 */
const BREAKEVEN_TOLERANCE = 0.0001;

/**
 * –ü—Ä–æ–≤–µ—Ä—è–µ—Ç, –Ω–∞—Ö–æ–¥–∏—Ç—Å—è –ª–∏ currentSl –≤ –∑–æ–Ω–µ –±–µ–∑—É–±—ã—Ç–∫–∞
 */
export function isBreakevenSL(currentSl: number, entryPrice: number): boolean {
  return Math.abs(currentSl - entryPrice) < entryPrice * BREAKEVEN_TOLERANCE;
}

/**
 * –†–∞—Å—Å—á–∏—Ç—ã–≤–∞–µ—Ç PnL –∏ –æ–ø—Ä–µ–¥–µ–ª—è–µ—Ç —Ç–∏–ø –∑–∞–∫—Ä—ã—Ç–∏—è —Å–¥–µ–ª–∫–∏
 * 
 * @param params - –ø–∞—Ä–∞–º–µ—Ç—Ä—ã —Å–¥–µ–ª–∫–∏
 * @returns TradeOutcome —Å PnL, —Ç–∏–ø–æ–º –∑–∞–∫—Ä—ã—Ç–∏—è –∏ –æ–ø–∏—Å–∞–Ω–∏–µ–º
 */
export function calculateTradeOutcome(params: TradeParams): TradeOutcome {
  const {
    status,
    direction,
    entryPrice: entryStr,
    tp1Price: tp1Str,
    tp2Price: tp2Str,
    slPrice: slStr,
    currentSl: currentSlStr,
  } = params;

  const entryPrice = parseFloat(entryStr);
  const tp1Price = parseFloat(tp1Str);
  const tp2Price = parseFloat(tp2Str);
  const slPrice = parseFloat(slStr);
  const currentSl = parseFloat(currentSlStr);

  let pnl = 0;
  let outcomeType: TradeOutcome['outcomeType'] = 'OPEN';
  let description = '';
  let breakeven = false;

  if (status === 'OPEN') {
    outcomeType = 'OPEN';
    description = '–ü–æ–∑–∏—Ü–∏—è –æ—Ç–∫—Ä—ã—Ç–∞';
    pnl = 0;
  } else if (status === 'TP1_HIT') {
    outcomeType = 'TP1_HIT';
    description = 'TP1 –¥–æ—Å—Ç–∏–≥–Ω—É—Ç (50% –ø–æ–∑–∏—Ü–∏–∏)';
    
    // TP1: 50% –ø–æ–∑–∏—Ü–∏–∏ –∑–∞–∫—Ä—ã—Ç–æ —Å –ø—Ä–∏–±—ã–ª—å—é –æ—Ç entry –¥–æ TP1
    if (direction === 'LONG') {
      pnl = ((tp1Price - entryPrice) / entryPrice) * 100 * 0.5;
    } else {
      pnl = ((entryPrice - tp1Price) / entryPrice) * 100 * 0.5;
    }
  } else if (status === 'TP2_HIT') {
    outcomeType = 'TP2_HIT';
    description = 'TP2 –¥–æ—Å—Ç–∏–≥–Ω—É—Ç (–ø–æ–ª–Ω–∞—è –ø—Ä–∏–±—ã–ª—å)';
    
    // TP2: 50% –Ω–∞ TP1 + 50% –Ω–∞ TP2
    if (direction === 'LONG') {
      const pnlTp1 = ((tp1Price - entryPrice) / entryPrice) * 100 * 0.5;
      const pnlTp2 = ((tp2Price - entryPrice) / entryPrice) * 100 * 0.5;
      pnl = pnlTp1 + pnlTp2;
    } else {
      const pnlTp1 = ((entryPrice - tp1Price) / entryPrice) * 100 * 0.5;
      const pnlTp2 = ((entryPrice - tp2Price) / entryPrice) * 100 * 0.5;
      pnl = pnlTp1 + pnlTp2;
    }
  } else if (status === 'SL_HIT') {
    // –ü—Ä–æ–≤–µ—Ä—è–µ–º, –∑–∞–∫—Ä—ã–ª—Å—è –ª–∏ SL –≤ –±–µ–∑—É–±—ã—Ç–∫–µ
    breakeven = isBreakevenSL(currentSl, entryPrice);
    
    if (breakeven) {
      outcomeType = 'SL_BREAKEVEN';
      description = '–ü–æ–∑–∏—Ü–∏—è –∑–∞–∫—Ä—ã—Ç–∞ –≤ –±–µ–∑—É–±—ã—Ç–∫–µ –ø–æ—Å–ª–µ TP1';
      
      // Breakeven: 50% –∑–∞–∫—Ä—ã—Ç–æ –Ω–∞ TP1, 50% –≤ –Ω–æ–ª—å
      if (direction === 'LONG') {
        pnl = ((tp1Price - entryPrice) / entryPrice) * 100 * 0.5;
      } else {
        pnl = ((entryPrice - tp1Price) / entryPrice) * 100 * 0.5;
      }
    } else {
      outcomeType = 'SL_HIT';
      description = 'Stop Loss —Å—Ä–∞–±–æ—Ç–∞–ª';
      
      // –û–±—ã—á–Ω—ã–π SL: –ø–æ–ª–Ω—ã–π —É–±—ã—Ç–æ–∫ –æ—Ç entry –¥–æ original SL
      if (direction === 'LONG') {
        pnl = ((slPrice - entryPrice) / entryPrice) * 100;
      } else {
        pnl = ((entryPrice - slPrice) / entryPrice) * 100;
      }
    }
  }

  return {
    pnl,
    isBreakeven: breakeven,
    outcomeType,
    description,
  };
}

/**
 * –§–æ—Ä–º–∞—Ç–∏—Ä—É–µ—Ç PnL –¥–ª—è –æ—Ç–æ–±—Ä–∞–∂–µ–Ω–∏—è –≤ Telegram
 */
export function formatPnL(pnl: number): string {
  const sign = pnl >= 0 ? '+' : '';
  return `${sign}${pnl.toFixed(2)}%`;
}

/**
 * –ü–æ–ª—É—á–∞–µ—Ç —ç–º–æ–¥–∑–∏ –¥–ª—è —Å—Ç–∞—Ç—É—Å–∞ —Å–¥–µ–ª–∫–∏
 */
export function getStatusEmoji(outcomeType: TradeOutcome['outcomeType']): string {
  switch (outcomeType) {
    case 'TP1_HIT':
      return 'üéØ';
    case 'TP2_HIT':
      return 'üíé';
    case 'SL_BREAKEVEN':
      return '‚öñÔ∏è';
    case 'SL_HIT':
      return 'üõë';
    case 'OPEN':
      return 'üìä';
    default:
      return '‚ùì';
  }
}
