import { Candle } from './binanceClient';

/**
 * –†–∞—Å—á—ë—Ç True Range (TR) –¥–ª—è –æ–¥–Ω–æ–π —Å–≤–µ—á–∏
 * 
 * TR = max(High - Low, |High - PrevClose|, |Low - PrevClose|)
 * 
 * True Range —É—á–∏—Ç—ã–≤–∞–µ—Ç –≥—ç–ø—ã –º–µ–∂–¥—É —Å–≤–µ—á–∞–º–∏, –≤ –æ—Ç–ª–∏—á–∏–µ –æ—Ç –ø—Ä–æ—Å—Ç–æ–≥–æ Range (High - Low)
 */
export function calculateTrueRange(current: Candle, previous: Candle | null): number {
  const high = parseFloat(current.high);
  const low = parseFloat(current.low);
  
  if (!previous) {
    // –î–ª—è –ø–µ—Ä–≤–æ–π —Å–≤–µ—á–∏ TR = High - Low
    return high - low;
  }
  
  const prevClose = parseFloat(previous.close);
  
  // TR = max(High-Low, |High-PrevClose|, |Low-PrevClose|)
  const highLow = high - low;
  const highPrevClose = Math.abs(high - prevClose);
  const lowPrevClose = Math.abs(low - prevClose);
  
  return Math.max(highLow, highPrevClose, lowPrevClose);
}

/**
 * –†–∞—Å—á—ë—Ç ATR (Average True Range) –Ω–∞ –∑–∞–¥–∞–Ω–Ω–æ–º –ø–µ—Ä–∏–æ–¥–µ
 * 
 * ATR = SMA(TR, period) –¥–ª—è –ø–µ—Ä–≤–æ–≥–æ –∑–Ω–∞—á–µ–Ω–∏—è, –∑–∞—Ç–µ–º EMA
 * 
 * –°—Ç–∞–Ω–¥–∞—Ä—Ç–Ω—ã–π –ø–µ—Ä–∏–æ–¥: 14
 * 
 * @param candles - –ú–∞—Å—Å–∏–≤ —Å–≤–µ—á–µ–π (–º–∏–Ω–∏–º—É–º period+1 —Å–≤–µ—á–µ–π)
 * @param period - –ü–µ—Ä–∏–æ–¥ –¥–ª—è ATR (default: 14)
 * @returns ATR –∑–Ω–∞—á–µ–Ω–∏–µ –∏–ª–∏ 0 –µ—Å–ª–∏ –Ω–µ–¥–æ—Å—Ç–∞—Ç–æ—á–Ω–æ –¥–∞–Ω–Ω—ã—Ö
 */
export function calculateATR(candles: Candle[], period: number = 14): number {
  if (candles.length < period + 1) {
    console.warn(`‚ö†Ô∏è [ATR] –ù–µ–¥–æ—Å—Ç–∞—Ç–æ—á–Ω–æ —Å–≤–µ—á–µ–π –¥–ª—è ATR${period}: ${candles.length} < ${period + 1}`);
    return 0;
  }
  
  // 1. –†–∞—Å—Å—á–∏—Ç—ã–≤–∞–µ–º True Range –¥–ª—è –∫–∞–∂–¥–æ–π —Å–≤–µ—á–∏
  const trValues: number[] = [];
  for (let i = 1; i < candles.length; i++) {
    const tr = calculateTrueRange(candles[i], candles[i - 1]);
    trValues.push(tr);
  }
  
  // 2. –ü–µ—Ä–≤–æ–µ –∑–Ω–∞—á–µ–Ω–∏–µ ATR = SMA(TR, period)
  const initialTRs = trValues.slice(0, period);
  let atr = initialTRs.reduce((sum, tr) => sum + tr, 0) / period;
  
  // 3. –ü–æ—Å–ª–µ–¥—É—é—â–∏–µ –∑–Ω–∞—á–µ–Ω–∏—è ATR = EMA(TR, period)
  // –§–æ—Ä–º—É–ª–∞: ATR = (Previous ATR √ó (period - 1) + Current TR) / period
  for (let i = period; i < trValues.length; i++) {
    atr = ((atr * (period - 1)) + trValues[i]) / period;
  }
  
  console.log(`üìä [ATR] Calculated ATR(${period}) = ${atr.toFixed(8)} from ${candles.length} candles`);
  
  return atr;
}

/**
 * –í—Å–ø–æ–º–æ–≥–∞—Ç–µ–ª—å–Ω–∞—è —Ñ—É–Ω–∫—Ü–∏—è: —Ä–∞—Å—á—ë—Ç ATR –¥–ª—è —Ä–∞–∑–Ω—ã—Ö —Ç–∞–π–º—Ñ—Ä–µ–π–º–æ–≤
 * 
 * –ò—Å–ø–æ–ª—å–∑—É–µ—Ç—Å—è –¥–ª—è –ø–æ–ª—É—á–µ–Ω–∏—è –∫–æ–Ω—Ç–µ–∫—Å—Ç–∞ –≤–æ–ª–∞—Ç–∏–ª—å–Ω–æ—Å—Ç–∏ –Ω–∞ multiple timeframes
 */
export interface MultiTimeframeATR {
  atr15m: number;
  atr1h: number;
  atr4h: number;
}

/**
 * –í—Å–ø–æ–º–æ–≥–∞—Ç–µ–ª—å–Ω–∞—è —Ñ—É–Ω–∫—Ü–∏—è: –ö–æ–Ω–≤–µ—Ä—Ç–∞—Ü–∏—è ATR –≤ –ø—É–Ω–∫—Ç—ã —Ü–µ–Ω—ã
 * 
 * –ü—Ä–∏–º–µ—Ä: –µ—Å–ª–∏ ATR = 0.5, —Ç–æ 0.25√óATR = 0.125
 */
export function atrToPrice(atr: number, multiplier: number): number {
  return atr * multiplier;
}

/**
 * –í—Å–ø–æ–º–æ–≥–∞—Ç–µ–ª—å–Ω–∞—è —Ñ—É–Ω–∫—Ü–∏—è: –†–∞—Å—á—ë—Ç —Ä–∞—Å—Å—Ç–æ—è–Ω–∏—è –≤ –µ–¥–∏–Ω–∏—Ü–∞—Ö ATR
 * 
 * –ü—Ä–∏–º–µ—Ä: distance = 0.10, ATR = 0.05 ‚Üí result = 2.0 (—Ä–∞—Å—Å—Ç–æ—è–Ω–∏–µ —Ä–∞–≤–Ω–æ 2√óATR)
 */
export function distanceInATR(distance: number, atr: number): number {
  if (atr === 0) return 0;
  return distance / atr;
}
