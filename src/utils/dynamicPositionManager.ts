/**
 * Dynamic Position Management Module
 * 
 * –†–∞—Å—Å—á–∏—Ç—ã–≤–∞–µ—Ç –¥–∏–Ω–∞–º–∏—á–µ—Å–∫–∏–µ TP —É—Ä–æ–≤–Ω–∏ –∏ % —á–∞—Å—Ç–∏—á–Ω–æ–≥–æ –∑–∞–∫—Ä—ã—Ç–∏—è –Ω–∞ –æ—Å–Ω–æ–≤–µ:
 * - Confluence score (–∫–∞—á–µ—Å—Ç–≤–æ —Å–∏–≥–Ω–∞–ª–∞)
 * - Trend strength (—Å–∏–ª–∞ —Ç—Ä–µ–Ω–¥–∞)
 * - Available R (—Å–≤–æ–±–æ–¥–Ω—ã–π –ø—É—Ç—å –¥–æ –∑–æ–Ω)
 * - ATR volatility (–≤–æ–ª–∞—Ç–∏–ª—å–Ω–æ—Å—Ç—å)
 * - Zone proximity (–±–ª–∏–∑–æ—Å—Ç—å –∫ –∑–æ–Ω–∞–º S/R)
 */

export type StrategyProfile = 
  | 'CONSERVATIVE'     // –ù–∏–∑–∫–æ–µ –∫–∞—á–µ—Å—Ç–≤–æ, –±–ª–∏–∑–∫–∏–µ –∑–æ–Ω—ã ‚Üí –±—ã—Å—Ç—Ä–∞—è —Ñ–∏–∫—Å–∞—Ü–∏—è
  | 'BALANCED'         // –°—Ä–µ–¥–Ω–∏–µ —É—Å–ª–æ–≤–∏—è ‚Üí —Å—Ç–∞–Ω–¥–∞—Ä—Ç–Ω–∞—è —Å—Ç—Ä–∞—Ç–µ–≥–∏—è
  | 'AGGRESSIVE'       // –í—ã—Å–æ–∫–æ–µ –∫–∞—á–µ—Å—Ç–≤–æ, —Å–≤–æ–±–æ–¥–Ω—ã–π –ø—É—Ç—å ‚Üí –º–∞–∫—Å–∏–º–∏–∑–∞—Ü–∏—è
  | 'TREND_FOLLOWING'  // –°–∏–ª—å–Ω—ã–π —Ç—Ä–µ–Ω–¥, –º–Ω–æ–≥–æ –º–µ—Å—Ç–∞ ‚Üí –¥–µ—Ä–∂–∏–º –¥–æ –∫–æ–Ω—Ü–∞
  | 'SCALP';           // –û—á–µ–Ω—å —Å–∂–∞—Ç—ã–µ —É—Å–ª–æ–≤–∏—è ‚Üí –±—ã—Å—Ç—Ä—ã–π –≤—Ö–æ–¥-–≤—ã—Ö–æ–¥

export interface DynamicStrategy {
  // TP levels in R units
  tp1R: number;
  tp2R: number;
  tp3R: number;
  
  // Partial close percentages (must sum to 100)
  p1: number;  // % to close at TP1
  p2: number;  // % to close at TP2
  p3: number;  // % to close at TP3
  
  // Metadata
  profile: StrategyProfile;
  reasoning: string;
  expectedPnlR: number; // Expected PnL if all TPs hit
  beThreshold: number;  // Breakeven activation threshold in R
}

export interface StrategyInputs {
  confluenceScore: number;      // 5-10
  trendStrength: 'weak' | 'medium' | 'strong';
  rAvailable: number;           // Free path in R units
  atrVolatility: 'low' | 'normal' | 'high';
  zoneProximity?: 'close' | 'medium' | 'far'; // Optional
  patternType?: string;         // Optional: pattern name
}

/**
 * –û—Å–Ω–æ–≤–Ω–∞—è —Ñ—É–Ω–∫—Ü–∏—è —Ä–∞—Å—á—ë—Ç–∞ –¥–∏–Ω–∞–º–∏—á–µ—Å–∫–æ–π —Å—Ç—Ä–∞—Ç–µ–≥–∏–∏
 */
export function calculateDynamicStrategy(inputs: StrategyInputs): DynamicStrategy {
  console.log('üéØ [DynamicPosManager] Calculating dynamic strategy:', inputs);
  
  // –í—ã–±–∏—Ä–∞–µ–º –ø—Ä–æ—Ñ–∏–ª—å –Ω–∞ –æ—Å–Ω–æ–≤–µ —É—Å–ª–æ–≤–∏–π
  const profile = selectProfile(inputs);
  console.log(`üìä [DynamicPosManager] Selected profile: ${profile}`);
  
  // –†–∞—Å—Å—á–∏—Ç—ã–≤–∞–µ–º —Å—Ç—Ä–∞—Ç–µ–≥–∏—é –¥–ª—è –≤—ã–±—Ä–∞–Ω–Ω–æ–≥–æ –ø—Ä–æ—Ñ–∏–ª—è
  const strategy = calculateStrategyForProfile(profile, inputs);
  
  console.log('‚úÖ [DynamicPosManager] Strategy calculated:', {
    profile: strategy.profile,
    tpLevels: `${strategy.tp1R}R / ${strategy.tp2R}R / ${strategy.tp3R}R`,
    closePercents: `${strategy.p1}% / ${strategy.p2}% / ${strategy.p3}%`,
    expectedPnl: `${strategy.expectedPnlR.toFixed(2)}R`,
  });
  
  return strategy;
}

/**
 * –í—ã–±–æ—Ä –ø—Ä–æ—Ñ–∏–ª—è –Ω–∞ –æ—Å–Ω–æ–≤–µ –≤—Ö–æ–¥–Ω—ã—Ö –ø–∞—Ä–∞–º–µ—Ç—Ä–æ–≤
 */
function selectProfile(inputs: StrategyInputs): StrategyProfile {
  const { confluenceScore, trendStrength, rAvailable, atrVolatility } = inputs;
  
  // SCALP: –û—á–µ–Ω—å –æ–≥—Ä–∞–Ω–∏—á–µ–Ω–Ω–æ–µ –ø—Ä–æ—Å—Ç—Ä–∞–Ω—Å—Ç–≤–æ
  if (rAvailable < 2.0) {
    return 'SCALP';
  }
  
  // TREND_FOLLOWING: –ò–¥–µ–∞–ª—å–Ω—ã–µ —É—Å–ª–æ–≤–∏—è –¥–ª—è —Ç—Ä–µ–Ω–¥–∞
  if (
    rAvailable > 5.0 && 
    trendStrength === 'strong' && 
    confluenceScore >= 8
  ) {
    return 'TREND_FOLLOWING';
  }
  
  // AGGRESSIVE: –•–æ—Ä–æ—à–∏–µ —É—Å–ª–æ–≤–∏—è
  if (
    confluenceScore >= 8 && 
    rAvailable > 3.0 && 
    atrVolatility !== 'high'
  ) {
    return 'AGGRESSIVE';
  }
  
  // CONSERVATIVE: –°–ª–∞–±—ã–µ —É—Å–ª–æ–≤–∏—è
  if (
    confluenceScore < 6 || 
    atrVolatility === 'high' ||
    rAvailable < 2.5
  ) {
    return 'CONSERVATIVE';
  }
  
  // BALANCED: –°—Ä–µ–¥–Ω–∏–µ —É—Å–ª–æ–≤–∏—è (default)
  return 'BALANCED';
}

/**
 * –†–∞—Å—Å—á–∏—Ç—ã–≤–∞–µ—Ç —Å—Ç—Ä–∞—Ç–µ–≥–∏—é –¥–ª—è –∫–æ–Ω–∫—Ä–µ—Ç–Ω–æ–≥–æ –ø—Ä–æ—Ñ–∏–ª—è —Å –∞–¥–∞–ø—Ç–∞—Ü–∏–µ–π
 */
function calculateStrategyForProfile(
  profile: StrategyProfile,
  inputs: StrategyInputs
): DynamicStrategy {
  const { confluenceScore, trendStrength, rAvailable, atrVolatility } = inputs;
  
  let strategy: DynamicStrategy;
  
  switch (profile) {
    case 'SCALP':
      strategy = {
        tp1R: 0.6,
        tp2R: 1.2,
        tp3R: 1.8,
        p1: 70,
        p2: 25,
        p3: 5,
        profile: 'SCALP',
        reasoning: '–°–∂–∞—Ç—ã–µ —É—Å–ª–æ–≤–∏—è (rAvailable < 2R) ‚Üí –±—ã—Å—Ç—Ä–∞—è —Ñ–∏–∫—Å–∞—Ü–∏—è –ø—Ä–∏–±—ã–ª–∏',
        expectedPnlR: 0.7 * 0.6 + 0.25 * 1.2 + 0.05 * 1.8,
        beThreshold: 0.25,
      };
      break;
      
    case 'CONSERVATIVE':
      strategy = {
        tp1R: 0.8,
        tp2R: 1.8,
        tp3R: 2.5,
        p1: 60,
        p2: 30,
        p3: 10,
        profile: 'CONSERVATIVE',
        reasoning: '–ù–∏–∑–∫–∏–π confluence –∏–ª–∏ –≤—ã—Å–æ–∫–∞—è –≤–æ–ª–∞—Ç–∏–ª—å–Ω–æ—Å—Ç—å ‚Üí —Ä–∞–Ω–Ω—è—è —Ñ–∏–∫—Å–∞—Ü–∏—è',
        expectedPnlR: 0.6 * 0.8 + 0.3 * 1.8 + 0.1 * 2.5,
        beThreshold: 0.35,
      };
      break;
      
    case 'BALANCED':
      strategy = {
        tp1R: 1.0,
        tp2R: 2.0,
        tp3R: 3.0,
        p1: 50,
        p2: 30,
        p3: 20,
        profile: 'BALANCED',
        reasoning: '–°—Ä–µ–¥–Ω–∏–µ —É—Å–ª–æ–≤–∏—è ‚Üí —Å—Ç–∞–Ω–¥–∞—Ä—Ç–Ω–∞—è —Å—Ç—Ä–∞—Ç–µ–≥–∏—è 1R/2R/3R —Å 50/30/20',
        expectedPnlR: 0.5 * 1.0 + 0.3 * 2.0 + 0.2 * 3.0,
        beThreshold: 0.40,
      };
      break;
      
    case 'AGGRESSIVE':
      strategy = {
        tp1R: 1.2,
        tp2R: 2.5,
        tp3R: 4.0,
        p1: 30,
        p2: 30,
        p3: 40,
        profile: 'AGGRESSIVE',
        reasoning: '–í—ã—Å–æ–∫–∏–π confluence –∏ —Å–≤–æ–±–æ–¥–Ω—ã–π –ø—É—Ç—å ‚Üí –º–∞–∫—Å–∏–º–∏–∑–∞—Ü–∏—è –ø—Ä–∏–±—ã–ª–∏',
        expectedPnlR: 0.3 * 1.2 + 0.3 * 2.5 + 0.4 * 4.0,
        beThreshold: 0.50,
      };
      break;
      
    case 'TREND_FOLLOWING':
      strategy = {
        tp1R: 1.0,
        tp2R: 3.0,
        tp3R: 5.0,
        p1: 25,
        p2: 25,
        p3: 50,
        profile: 'TREND_FOLLOWING',
        reasoning: '–°–∏–ª—å–Ω—ã–π —Ç—Ä–µ–Ω–¥ –∏ rAvailable > 5R ‚Üí –¥–µ—Ä–∂–∏–º –¥–æ –±–æ–ª—å—à–∏—Ö —Ü–µ–ª–µ–π',
        expectedPnlR: 0.25 * 1.0 + 0.25 * 3.0 + 0.5 * 5.0,
        beThreshold: 0.60,
      };
      break;
  }
  
  // –ú–∏–∫—Ä–æ-–∞–¥–∞–ø—Ç–∞—Ü–∏–∏ –Ω–∞ –æ—Å–Ω–æ–≤–µ –¥–æ–ø–æ–ª–Ω–∏—Ç–µ–ª—å–Ω—ã—Ö —Ñ–∞–∫—Ç–æ—Ä–æ–≤
  strategy = applyMicroAdjustments(strategy, inputs);
  
  return strategy;
}

/**
 * –ü—Ä–∏–º–µ–Ω—è–µ—Ç –º–∏–∫—Ä–æ-–∞–¥–∞–ø—Ç–∞—Ü–∏–∏ –∫ –±–∞–∑–æ–≤–æ–π —Å—Ç—Ä–∞—Ç–µ–≥–∏–∏
 */
function applyMicroAdjustments(
  baseStrategy: DynamicStrategy,
  inputs: StrategyInputs
): DynamicStrategy {
  const { confluenceScore, atrVolatility, rAvailable } = inputs;
  let { tp1R, tp2R, tp3R } = baseStrategy;
  
  // –°–∂–∞—Ç–∏–µ TP –µ—Å–ª–∏ –¥–æ—Å—Ç—É–ø–Ω–æ–µ –ø—Ä–æ—Å—Ç—Ä–∞–Ω—Å—Ç–≤–æ –º–µ–Ω—å—à–µ –æ–∂–∏–¥–∞–µ–º–æ–≥–æ
  if (rAvailable < tp3R) {
    const compressionFactor = Math.min(0.9, rAvailable / tp3R);
    tp1R *= compressionFactor;
    tp2R *= compressionFactor;
    tp3R = Math.min(tp3R, rAvailable * 0.95); // –û—Å—Ç–∞–≤–ª—è–µ–º 5% –±—É—Ñ–µ—Ä
    console.log(`‚ö†Ô∏è [DynamicPosManager] Compressing TPs (rAvailable=${rAvailable.toFixed(2)}R)`);
  }
  
  // –†–∞—Å—à–∏—Ä–µ–Ω–∏–µ TP1 –ø—Ä–∏ –æ—á–µ–Ω—å –≤—ã—Å–æ–∫–æ–º confluence
  if (confluenceScore >= 9 && baseStrategy.profile !== 'SCALP') {
    tp1R *= 1.1;
    console.log(`üöÄ [DynamicPosManager] Expanding TP1 (confluence=${confluenceScore})`);
  }
  
  // –°–∂–∞—Ç–∏–µ TP –ø—Ä–∏ –≤—ã—Å–æ–∫–æ–π –≤–æ–ª–∞—Ç–∏–ª—å–Ω–æ—Å—Ç–∏
  if (atrVolatility === 'high' && baseStrategy.profile !== 'CONSERVATIVE') {
    tp2R *= 0.9;
    tp3R *= 0.9;
    console.log(`‚ö†Ô∏è [DynamicPosManager] Reducing TP2/3 (high volatility)`);
  }
  
  // –ü–µ—Ä–µ—Å—á–∏—Ç—ã–≤–∞–µ–º expectedPnlR —Å –Ω–æ–≤—ã–º–∏ TP
  const { p1, p2, p3 } = baseStrategy;
  const expectedPnlR = (p1/100) * tp1R + (p2/100) * tp2R + (p3/100) * tp3R;
  
  return {
    ...baseStrategy,
    tp1R: parseFloat(tp1R.toFixed(2)),
    tp2R: parseFloat(tp2R.toFixed(2)),
    tp3R: parseFloat(tp3R.toFixed(2)),
    expectedPnlR: parseFloat(expectedPnlR.toFixed(2)),
  };
}

/**
 * –£—Ç–∏–ª–∏—Ç–∞: —Ä–∞—Å—Å—á–∏—Ç—ã–≤–∞–µ—Ç utility score –¥–ª—è –æ–ø—Ä–µ–¥–µ–ª–µ–Ω–∏—è –æ–ø—Ç–∏–º–∞–ª—å–Ω—ã—Ö %
 * (–∞–ª—å—Ç–µ—Ä–Ω–∞—Ç–∏–≤–Ω—ã–π –ø–æ–¥—Ö–æ–¥ - –Ω–µ –∏—Å–ø–æ–ª—å–∑—É–µ—Ç—Å—è –≤ —Ç–µ–∫—É—â–µ–π —Ä–µ–∞–ª–∏–∑–∞—Ü–∏–∏ –ø—Ä–æ—Ñ–∏–ª–µ–π)
 */
export function calculateUtilityBasedPartialClose(
  tp1R: number,
  tp2R: number,
  tp3R: number,
  confluenceScore: number,
  trendStrength: 'weak' | 'medium' | 'strong',
  atrVolatility: 'low' | 'normal' | 'high'
): { p1: number; p2: number; p3: number } {
  // –†–∞—Å—Å—á–∏—Ç—ã–≤–∞–µ–º utility –¥–ª—è –∫–∞–∂–¥–æ–≥–æ TP
  const u1 = calculateUtility(tp1R, confluenceScore, trendStrength, atrVolatility);
  const u2 = calculateUtility(tp2R, confluenceScore, trendStrength, atrVolatility);
  const u3 = calculateUtility(tp3R, confluenceScore, trendStrength, atrVolatility);
  
  // –ù–æ—Ä–º–∞–ª–∏–∑—É–µ–º –≤ –ø—Ä–æ—Ü–µ–Ω—Ç—ã
  const totalUtility = u1 + u2 + u3;
  let p1 = (u1 / totalUtility) * 100;
  let p2 = (u2 / totalUtility) * 100;
  let p3 = (u3 / totalUtility) * 100;
  
  // –ü—Ä–∏–º–µ–Ω—è–µ–º –æ–≥—Ä–∞–Ω–∏—á–µ–Ω–∏—è (min 15%, max 70%)
  p1 = Math.max(15, Math.min(70, p1));
  p2 = Math.max(15, Math.min(70, p2));
  p3 = Math.max(15, Math.min(70, p3));
  
  // –ü–µ—Ä–µ—Å—á–∏—Ç—ã–≤–∞–µ–º —á—Ç–æ–±—ã —Å—É–º–º–∞ = 100%
  const sum = p1 + p2 + p3;
  return {
    p1: parseFloat(((p1 / sum) * 100).toFixed(0)),
    p2: parseFloat(((p2 / sum) * 100).toFixed(0)),
    p3: parseFloat(((p3 / sum) * 100).toFixed(0)),
  };
}

function calculateUtility(
  tpR: number,
  confluence: number,
  trend: 'weak' | 'medium' | 'strong',
  volatility: 'low' | 'normal' | 'high'
): number {
  let utility = tpR; // –ë–∞–∑–æ–≤–∞—è utility = —Ä–∞—Å—Å—Ç–æ—è–Ω–∏–µ
  
  // –ë–æ–Ω—É—Å –∑–∞ –≤—ã—Å–æ–∫–æ–µ –∫–∞—á–µ—Å—Ç–≤–æ —Å–∏–≥–Ω–∞–ª–∞
  if (confluence >= 8) utility *= 1.3;
  else if (confluence >= 6) utility *= 1.1;
  else utility *= 0.9;
  
  // –ë–æ–Ω—É—Å –∑–∞ —Å–∏–ª—å–Ω—ã–π —Ç—Ä–µ–Ω–¥ (–¥–µ—Ä–∂–∏–º –¥–æ–ª—å—à–µ)
  if (trend === 'strong') utility *= 1.25;
  else if (trend === 'weak') utility *= 0.85;
  
  // –®—Ç—Ä–∞—Ñ –∑–∞ –≤—ã—Å–æ–∫—É—é –≤–æ–ª–∞—Ç–∏–ª—å–Ω–æ—Å—Ç—å (–∑–∞–∫—Ä—ã–≤–∞–µ–º —Ä–∞–Ω—å—à–µ)
  if (volatility === 'high') utility *= 0.8;
  else if (volatility === 'low') utility *= 1.1;
  
  return utility;
}
