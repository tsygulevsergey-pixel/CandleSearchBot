/**
 * TradingView-style Support/Resistance Channel Detection
 * 
 * Based on "Support Resistance Channels" indicator by LonesomeTheBlue
 * https://www.tradingview.com/script/...
 * 
 * FEATURES:
 * - Finds Pivot Points (local highs/lows)
 * - Groups pivots into channels (ranges, not single prices)
 * - Calculates channel strength (pivot count + touch count)
 * - Returns top-N strongest channels
 * 
 * USAGE:
 * const channels = findSRChannels(candles, {
 *   pivotPeriod: 10,
 *   maxChannelWidthPercent: 5,
 *   minStrength: 1,
 *   maxChannels: 6,
 *   loopbackPeriod: 290
 * });
 * 
 * STATUS: ‚ö†Ô∏è NOT ACTIVE - Implementation ready, awaiting testing
 */

import { Candle } from './binanceClient';

export interface SRChannel {
  upper: number;        // –í–µ—Ä—Ö–Ω—è—è –≥—Ä–∞–Ω–∏—Ü–∞ –∫–∞–Ω–∞–ª–∞
  lower: number;        // –ù–∏–∂–Ω—è—è –≥—Ä–∞–Ω–∏—Ü–∞ –∫–∞–Ω–∞–ª–∞
  strength: number;     // –°–∏–ª–∞ –∫–∞–Ω–∞–ª–∞ (pivot count √ó 20 + touch count)
  pivotCount: number;   // –ö–æ–ª–∏—á–µ—Å—Ç–≤–æ –ø–∏–≤–æ—Ç–æ–≤ –≤ –∫–∞–Ω–∞–ª–µ
  touchCount: number;   // –ö–æ–ª–∏—á–µ—Å—Ç–≤–æ –∫–∞—Å–∞–Ω–∏–π high/low –∫–∞–Ω–∞–ª–∞
  type: 'support' | 'resistance' | 'neutral'; // –¢–∏–ø –æ—Ç–Ω–æ—Å–∏—Ç–µ–ª—å–Ω–æ —Ç–µ–∫—É—â–µ–π —Ü–µ–Ω—ã
}

export interface SRChannelOptions {
  pivotPeriod?: number;          // –ü–µ—Ä–∏–æ–¥ –¥–ª—è Pivot Points (default: 10)
  source?: 'high_low' | 'close_open'; // –ò—Å—Ç–æ—á–Ω–∏–∫ –¥–ª—è –ø–∏–≤–æ—Ç–æ–≤ (default: 'high_low')
  maxChannelWidthPercent?: number;    // –ú–∞–∫—Å —à–∏—Ä–∏–Ω–∞ –∫–∞–Ω–∞–ª–∞ –≤ % (default: 5)
  minStrength?: number;          // –ú–∏–Ω–∏–º–∞–ª—å–Ω–∞—è —Å–∏–ª–∞ –∫–∞–Ω–∞–ª–∞ (default: 1)
  maxChannels?: number;          // –ú–∞–∫—Å –∫–æ–ª–∏—á–µ—Å—Ç–≤–æ –∫–∞–Ω–∞–ª–æ–≤ (default: 6)
  loopbackPeriod?: number;       // –ü–µ—Ä–∏–æ–¥ –¥–ª—è –ø–æ–∏—Å–∫–∞ –ø–∏–≤–æ—Ç–æ–≤ (default: 290)
  rangeCalculationPeriod?: number; // –ü–µ—Ä–∏–æ–¥ –¥–ª—è —Ä–∞—Å—á–µ—Ç–∞ range (default: 300)
}

interface PivotPoint {
  value: number;
  index: number;
  type: 'high' | 'low';
}

/**
 * –ù–∞—Ö–æ–¥–∏—Ç Pivot High (–ª–æ–∫–∞–ª—å–Ω—ã–π –º–∞–∫—Å–∏–º—É–º)
 * –¢—Ä–µ–±—É–µ—Ç: –ø–µ—Ä–∏–æ–¥ —Å–≤–µ—á–µ–π —Å–ª–µ–≤–∞ –∏ —Å–ø—Ä–∞–≤–∞ —Å –º–µ–Ω—å—à–∏–º–∏ –º–∞–∫—Å–∏–º—É–º–∞–º–∏
 */
function findPivotHigh(candles: Candle[], index: number, period: number, source: 'high_low' | 'close_open'): number | null {
  if (index < period || index >= candles.length - period) {
    return null;
  }

  const getValue = (candle: Candle) => 
    source === 'high_low' ? parseFloat(candle.high) : Math.max(parseFloat(candle.close), parseFloat(candle.open));

  const centerValue = getValue(candles[index]);

  // –ü—Ä–æ–≤–µ—Ä—è–µ–º –ø–µ—Ä–∏–æ–¥ —Å–ª–µ–≤–∞
  for (let i = index - period; i < index; i++) {
    if (getValue(candles[i]) >= centerValue) {
      return null;
    }
  }

  // –ü—Ä–æ–≤–µ—Ä—è–µ–º –ø–µ—Ä–∏–æ–¥ —Å–ø—Ä–∞–≤–∞
  for (let i = index + 1; i <= index + period; i++) {
    if (getValue(candles[i]) >= centerValue) {
      return null;
    }
  }

  return centerValue;
}

/**
 * –ù–∞—Ö–æ–¥–∏—Ç Pivot Low (–ª–æ–∫–∞–ª—å–Ω—ã–π –º–∏–Ω–∏–º—É–º)
 * –¢—Ä–µ–±—É–µ—Ç: –ø–µ—Ä–∏–æ–¥ —Å–≤–µ—á–µ–π —Å–ª–µ–≤–∞ –∏ —Å–ø—Ä–∞–≤–∞ —Å –±–æ–ª—å—à–∏–º–∏ –º–∏–Ω–∏–º—É–º–∞–º–∏
 */
function findPivotLow(candles: Candle[], index: number, period: number, source: 'high_low' | 'close_open'): number | null {
  if (index < period || index >= candles.length - period) {
    return null;
  }

  const getValue = (candle: Candle) => 
    source === 'high_low' ? parseFloat(candle.low) : Math.min(parseFloat(candle.close), parseFloat(candle.open));

  const centerValue = getValue(candles[index]);

  // –ü—Ä–æ–≤–µ—Ä—è–µ–º –ø–µ—Ä–∏–æ–¥ —Å–ª–µ–≤–∞
  for (let i = index - period; i < index; i++) {
    if (getValue(candles[i]) <= centerValue) {
      return null;
    }
  }

  // –ü—Ä–æ–≤–µ—Ä—è–µ–º –ø–µ—Ä–∏–æ–¥ —Å–ø—Ä–∞–≤–∞
  for (let i = index + 1; i <= index + period; i++) {
    if (getValue(candles[i]) <= centerValue) {
      return null;
    }
  }

  return centerValue;
}

/**
 * –ò–∑–≤–ª–µ–∫–∞–µ—Ç –≤—Å–µ Pivot Points –∏–∑ –º–∞—Å—Å–∏–≤–∞ —Å–≤–µ—á–µ–π
 */
function extractPivotPoints(
  candles: Candle[], 
  period: number, 
  source: 'high_low' | 'close_open',
  loopbackPeriod: number
): PivotPoint[] {
  const pivots: PivotPoint[] = [];
  const startIndex = Math.max(0, candles.length - loopbackPeriod - period);

  for (let i = startIndex; i < candles.length - period; i++) {
    const pivotHigh = findPivotHigh(candles, i, period, source);
    if (pivotHigh !== null) {
      pivots.push({ value: pivotHigh, index: i, type: 'high' });
    }

    const pivotLow = findPivotLow(candles, i, period, source);
    if (pivotLow !== null) {
      pivots.push({ value: pivotLow, index: i, type: 'low' });
    }
  }

  return pivots;
}

/**
 * –ì—Ä—É–ø–ø–∏—Ä—É–µ—Ç –ø–∏–≤–æ—Ç—ã –≤ –∫–∞–Ω–∞–ª —Å –∑–∞–¥–∞–Ω–Ω–æ–π –º–∞–∫—Å —à–∏—Ä–∏–Ω–æ–π
 * –í–æ–∑–≤—Ä–∞—â–∞–µ—Ç –≥—Ä–∞–Ω–∏—Ü—ã –∫–∞–Ω–∞–ª–∞ –∏ –∫–æ–ª–∏—á–µ—Å—Ç–≤–æ –ø–∏–≤–æ—Ç–æ–≤
 */
function createChannelFromPivot(
  pivotIndex: number,
  allPivots: PivotPoint[],
  maxWidth: number
): { upper: number; lower: number; pivotCount: number } {
  let upper = allPivots[pivotIndex].value;
  let lower = allPivots[pivotIndex].value;
  let pivotCount = 1;

  for (let i = 0; i < allPivots.length; i++) {
    if (i === pivotIndex) continue;

    const pivotValue = allPivots[i].value;
    
    // –ü—Ä–æ–≤–µ—Ä—è–µ–º, –≤–ª–µ–∑–µ—Ç –ª–∏ –ø–∏–≤–æ—Ç –≤ –∫–∞–Ω–∞–ª —Å —É—á–µ—Ç–æ–º –º–∞–∫—Å–∏–º–∞–ª—å–Ω–æ–π —à–∏—Ä–∏–Ω—ã
    const potentialLower = Math.min(lower, pivotValue);
    const potentialUpper = Math.max(upper, pivotValue);
    const width = potentialUpper - potentialLower;

    if (width <= maxWidth) {
      lower = potentialLower;
      upper = potentialUpper;
      pivotCount++;
    }
  }

  // –®–∏—Ä–∏–Ω–∞ –∫–∞–Ω–∞–ª–∞ –æ–ø—Ä–µ–¥–µ–ª—è–µ—Ç—Å—è –µ—Å—Ç–µ—Å—Ç–≤–µ–Ω–Ω—ã–º —Ä–∞–∑–±—Ä–æ—Å–æ–º pivots
  // –ï—Å–ª–∏ –≤ –≥—Ä—É–ø–ø–µ 1 pivot ‚Üí upper = lower (—Ç–æ—á–∫–∞)
  // –ï—Å–ª–∏ –≤ –≥—Ä—É–ø–ø–µ –Ω–µ—Å–∫–æ–ª—å–∫–æ pivots ‚Üí upper > lower (–¥–∏–∞–ø–∞–∑–æ–Ω)
  // –≠—Ç–æ —Ç–æ—á–Ω–æ —Å–æ–æ—Ç–≤–µ—Ç—Å—Ç–≤—É–µ—Ç –æ—Ä–∏–≥–∏–Ω–∞–ª—å–Ω–æ–º—É TradingView –∞–ª–≥–æ—Ä–∏—Ç–º—É

  return { upper, lower, pivotCount };
}

/**
 * –ü–æ–¥—Å—á–∏—Ç—ã–≤–∞–µ—Ç –∫–æ–ª–∏—á–µ—Å—Ç–≤–æ –∫–∞—Å–∞–Ω–∏–π –∫–∞–Ω–∞–ª–∞ —Å–≤–µ—á–∞–º–∏
 */
function countChannelTouches(
  candles: Candle[],
  upper: number,
  lower: number,
  loopbackPeriod: number
): number {
  let touchCount = 0;
  const startIndex = Math.max(0, candles.length - loopbackPeriod);

  for (let i = startIndex; i < candles.length; i++) {
    const high = parseFloat(candles[i].high);
    const low = parseFloat(candles[i].low);

    // –ü—Ä–æ–≤–µ—Ä—è–µ–º –∫–∞—Å–∞–Ω–∏–µ –∫–∞–Ω–∞–ª–∞
    if ((high <= upper && high >= lower) || (low <= upper && low >= lower)) {
      touchCount++;
    }
  }

  return touchCount;
}

/**
 * –†–∞—Å—Å—á–∏—Ç—ã–≤–∞–µ—Ç —Å–∏–ª—É –∫–∞–Ω–∞–ª–∞
 * –§–æ—Ä–º—É–ª–∞: pivotCount √ó 20 + touchCount
 */
function calculateChannelStrength(
  pivotCount: number,
  touchCount: number
): number {
  return pivotCount * 20 + touchCount;
}

/**
 * –û–ø—Ä–µ–¥–µ–ª—è–µ—Ç —Ç–∏–ø –∫–∞–Ω–∞–ª–∞ –æ—Ç–Ω–æ—Å–∏—Ç–µ–ª—å–Ω–æ —Ç–µ–∫—É—â–µ–π —Ü–µ–Ω—ã
 */
function determineChannelType(
  upper: number,
  lower: number,
  currentPrice: number
): 'support' | 'resistance' | 'neutral' {
  if (upper < currentPrice && lower < currentPrice) {
    return 'support';
  } else if (upper > currentPrice && lower > currentPrice) {
    return 'resistance';
  } else {
    return 'neutral'; // –¶–µ–Ω–∞ –≤–Ω—É—Ç—Ä–∏ –∫–∞–Ω–∞–ª–∞
  }
}

/**
 * –£–¥–∞–ª—è–µ—Ç –∫–∞–Ω–∞–ª—ã, –∫–æ—Ç–æ—Ä—ã–µ –ø–µ—Ä–µ–∫—Ä—ã–≤–∞—é—Ç—Å—è —Å –±–æ–ª–µ–µ —Å–∏–ª—å–Ω—ã–º–∏
 */
function removeDuplicateChannels(channels: SRChannel[]): SRChannel[] {
  const result: SRChannel[] = [];

  for (const channel of channels) {
    let isDuplicate = false;

    for (const existingChannel of result) {
      // –ü—Ä–æ–≤–µ—Ä—è–µ–º –ø–µ—Ä–µ–∫—Ä—ã—Ç–∏–µ
      const overlap = 
        (channel.upper <= existingChannel.upper && channel.upper >= existingChannel.lower) ||
        (channel.lower <= existingChannel.upper && channel.lower >= existingChannel.lower) ||
        (existingChannel.upper <= channel.upper && existingChannel.upper >= channel.lower) ||
        (existingChannel.lower <= channel.upper && existingChannel.lower >= channel.lower);

      if (overlap) {
        isDuplicate = true;
        break;
      }
    }

    if (!isDuplicate) {
      result.push(channel);
    }
  }

  return result;
}

/**
 * –ì–õ–ê–í–ù–ê–Ø –§–£–ù–ö–¶–ò–Ø: –ù–∞—Ö–æ–¥–∏—Ç S/R –∫–∞–Ω–∞–ª—ã –≤ –º–∞—Å—Å–∏–≤–µ —Å–≤–µ—á–µ–π
 * 
 * @param candles - –ú–∞—Å—Å–∏–≤ —Å–≤–µ—á–µ–π
 * @param options - –û–ø—Ü–∏–∏ –∞–ª–≥–æ—Ä–∏—Ç–º–∞
 * @returns –ú–∞—Å—Å–∏–≤ S/R –∫–∞–Ω–∞–ª–æ–≤, –æ—Ç—Å–æ—Ä—Ç–∏—Ä–æ–≤–∞–Ω–Ω—ã—Ö –ø–æ —Å–∏–ª–µ (—É–±—ã–≤–∞–Ω–∏–µ)
 */
export function findSRChannels(
  candles: Candle[],
  options: SRChannelOptions = {}
): SRChannel[] {
  const {
    pivotPeriod = 10,
    source = 'high_low',
    maxChannelWidthPercent = 5,
    minStrength = 1,
    maxChannels = 6,
    loopbackPeriod = 290,
    rangeCalculationPeriod = 300,
  } = options;

  if (candles.length < rangeCalculationPeriod) {
    console.log(`‚ö†Ô∏è [SRChannels] Not enough candles: ${candles.length} < ${rangeCalculationPeriod}`);
    return [];
  }

  // 1. –†–∞—Å—Å—á–∏—Ç—ã–≤–∞–µ–º –º–∞–∫—Å–∏–º–∞–ª—å–Ω—É—é —à–∏—Ä–∏–Ω—É –∫–∞–Ω–∞–ª–∞
  const recentCandles = candles.slice(-rangeCalculationPeriod);
  const highest = Math.max(...recentCandles.map(c => parseFloat(c.high)));
  const lowest = Math.min(...recentCandles.map(c => parseFloat(c.low)));
  const maxWidth = (highest - lowest) * (maxChannelWidthPercent / 100);

  console.log(`üìä [SRChannels] Range: ${lowest.toFixed(2)}-${highest.toFixed(2)}, MaxWidth: ${maxWidth.toFixed(2)} (${maxChannelWidthPercent}%)`);

  // 2. –ò–∑–≤–ª–µ–∫–∞–µ–º –≤—Å–µ Pivot Points
  const pivots = extractPivotPoints(candles, pivotPeriod, source, loopbackPeriod);
  console.log(`üîç [SRChannels] Found ${pivots.length} pivot points`);

  if (pivots.length === 0) {
    return [];
  }

  // 3. –°–æ–∑–¥–∞–µ–º –∫–∞–Ω–∞–ª—ã –¥–ª—è –∫–∞–∂–¥–æ–≥–æ –ø–∏–≤–æ—Ç–∞
  const candidateChannels: SRChannel[] = [];

  for (let i = 0; i < pivots.length; i++) {
    const { upper, lower, pivotCount } = createChannelFromPivot(i, pivots, maxWidth);
    const touchCount = countChannelTouches(candles, upper, lower, loopbackPeriod);
    const strength = calculateChannelStrength(pivotCount, touchCount);

    if (strength >= minStrength * 20) {
      const currentPrice = parseFloat(candles[candles.length - 1].close);
      const type = determineChannelType(upper, lower, currentPrice);

      candidateChannels.push({
        upper,
        lower,
        strength,
        pivotCount,
        touchCount,
        type,
      });
    }
  }

  // 4. –°–æ—Ä—Ç–∏—Ä—É–µ–º –ø–æ —Å–∏–ª–µ (—É–±—ã–≤–∞–Ω–∏–µ)
  candidateChannels.sort((a, b) => b.strength - a.strength);

  // 5. –£–¥–∞–ª—è–µ–º –¥—É–±–ª–∏–∫–∞—Ç—ã (–ø–µ—Ä–µ–∫—Ä—ã–≤–∞—é—â–∏–µ—Å—è –∫–∞–Ω–∞–ª—ã)
  const uniqueChannels = removeDuplicateChannels(candidateChannels);

  // 6. –í–æ–∑–≤—Ä–∞—â–∞–µ–º —Ç–æ–ø-N
  const result = uniqueChannels.slice(0, maxChannels);

  console.log(`‚úÖ [SRChannels] Returning ${result.length} channels (sorted by strength)`);
  result.forEach((ch, idx) => {
    console.log(`   ${idx + 1}. ${ch.type.toUpperCase()}: ${ch.lower.toFixed(4)}-${ch.upper.toFixed(4)} | Strength: ${ch.strength} (${ch.pivotCount} pivots, ${ch.touchCount} touches)`);
  });

  return result;
}

/**
 * –í—Å–ø–æ–º–æ–≥–∞—Ç–µ–ª—å–Ω–∞—è —Ñ—É–Ω–∫—Ü–∏—è: –ù–∞—Ö–æ–¥–∏—Ç –±–ª–∏–∂–∞–π—à–∏–π Support –∫–∞–Ω–∞–ª –∫ —Ç–µ–∫—É—â–µ–π —Ü–µ–Ω–µ
 * Support –í–°–ï–ì–î–ê –¥–æ–ª–∂–µ–Ω –±—ã—Ç—å –ù–ò–ñ–ï —Ç–µ–∫—É—â–µ–π —Ü–µ–Ω—ã
 */
export function getNearestSupportChannel(channels: SRChannel[], currentPrice: number): SRChannel | null {
  const supportChannels = channels
    .filter(ch => ch.type === 'support' && ch.upper < currentPrice) // –¢–æ–ª—å–∫–æ –∑–æ–Ω—ã –ù–ò–ñ–ï —Ü–µ–Ω—ã
    .sort((a, b) => (currentPrice - a.upper) - (currentPrice - b.upper)); // –ë–ª–∏–∂–∞–π—à–∞—è —Å–Ω–∏–∑—É

  return supportChannels.length > 0 ? supportChannels[0] : null;
}

/**
 * –í—Å–ø–æ–º–æ–≥–∞—Ç–µ–ª—å–Ω–∞—è —Ñ—É–Ω–∫—Ü–∏—è: –ù–∞—Ö–æ–¥–∏—Ç –±–ª–∏–∂–∞–π—à–∏–π Resistance –∫–∞–Ω–∞–ª –∫ —Ç–µ–∫—É—â–µ–π —Ü–µ–Ω–µ
 * Resistance –í–°–ï–ì–î–ê –¥–æ–ª–∂–µ–Ω –±—ã—Ç—å –í–´–®–ï —Ç–µ–∫—É—â–µ–π —Ü–µ–Ω—ã
 */
export function getNearestResistanceChannel(channels: SRChannel[], currentPrice: number): SRChannel | null {
  const resistanceChannels = channels
    .filter(ch => ch.type === 'resistance' && ch.lower > currentPrice) // –¢–æ–ª—å–∫–æ –∑–æ–Ω—ã –í–´–®–ï —Ü–µ–Ω—ã
    .sort((a, b) => (a.lower - currentPrice) - (b.lower - currentPrice)); // –ë–ª–∏–∂–∞–π—à–∞—è —Å–≤–µ—Ä—Ö—É

  return resistanceChannels.length > 0 ? resistanceChannels[0] : null;
}

/**
 * –í—Å–ø–æ–º–æ–≥–∞—Ç–µ–ª—å–Ω–∞—è —Ñ—É–Ω–∫—Ü–∏—è: –ü—Ä–æ–≤–µ—Ä—è–µ—Ç –Ω–∞—Ö–æ–¥–∏—Ç—Å—è –ª–∏ —Ü–µ–Ω–∞ –≤–Ω—É—Ç—Ä–∏ –∫–∞–Ω–∞–ª–∞
 */
export function isPriceInChannel(price: number, channel: SRChannel): boolean {
  return price >= channel.lower && price <= channel.upper;
}

/**
 * –í—Å–ø–æ–º–æ–≥–∞—Ç–µ–ª—å–Ω–∞—è —Ñ—É–Ω–∫—Ü–∏—è: –†–∞—Å—Å—á–∏—Ç—ã–≤–∞–µ—Ç —Ä–∞—Å—Å—Ç–æ—è–Ω–∏–µ –¥–æ –∫–∞–Ω–∞–ª–∞ (0 –µ—Å–ª–∏ –≤–Ω—É—Ç—Ä–∏)
 */
export function getDistanceToChannel(price: number, channel: SRChannel): number {
  if (isPriceInChannel(price, channel)) {
    return 0;
  }
  
  if (price < channel.lower) {
    return channel.lower - price;
  }
  
  return price - channel.upper;
}
